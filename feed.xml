<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Risa writes about Rails, Postgres, DevOps, and other things. She loves pairing, internet memes, cats, and all the cute things.
</description>
    <link>http://risaonrails.com/</link>
    <atom:link href="http://risaonrails.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 10 Dec 2015 16:26:56 -0800</pubDate>
    <lastBuildDate>Thu, 10 Dec 2015 16:26:56 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Thoughts on Atom, the text editor</title>
        <description>&lt;p&gt;I want to take the time to give my opinion on Atom, the text editor. As a developer, I can choose between a plethora of options for text editors, including but not limited to vim, emacs, Sublime, and Atom. As a developer that prefers GUI and using a mouse, I&amp;#39;m going to casually ignore any terminal(ly ill) related editors. Why? I think this sums it up pretty nicely:&lt;/p&gt;

&lt;div class=&#39;embed tweet&#39;&gt;Tweet could not be processed&lt;/div&gt;

&lt;p&gt;Probably much like every Rails developer that taught themselves, I learned Rails using Sublime. And, quite frankly, Sublime is great! It has a ton of functionality, packages to add more functionality, and a fairly decent default colour scheme. But, teaching yourself how to learn how to install new packages for whatever new functionality was a pain in the butt.&lt;/p&gt;

&lt;p&gt;Then came Atom. At first, I thought, &amp;quot;Not &lt;em&gt;another&lt;/em&gt; editor! What makes it so much better than Sublime??&amp;quot; and thought nothing of it. I continued to use Sublime. But then I started to write a lot in Markdown. In particular, Github markdown because of support docs.&lt;/p&gt;

&lt;p&gt;A colleague of mine mentioned an app that displayed a file in markdown, some app that started with a big teal M. I have no idea what it was, but having to use another app to view Markdown format was a pain.&lt;/p&gt;

&lt;p&gt;Another colleague suggested Atom. Atom had this thing called &amp;quot;Markdown preview&amp;quot;, done with a keyboard shortcut of &lt;code&gt;cntl-shift-m&lt;/code&gt;. Boom! To my left was my .md file I was working on and to my right was the preview version. Fantastic!&lt;/p&gt;

&lt;p&gt;But, after my stint at that particular job was over, I stopped using Atom and went back to Sublime. It wasn&amp;#39;t until about a month later when that very same colleague mentioned in a tweet that Atom had gotten to be considerably better than Sublime and that he himself completely switched. I decided to give Atom another go, mostly after Yet Another Popup(tm) happened on Sublime. (Yeah I didn&amp;#39;t want to shell out $70 for it, mostly because I don&amp;#39;t use all those packages they have.)&lt;/p&gt;

&lt;p&gt;I haven&amp;#39;t looked back. Admittedly I haven&amp;#39;t really added extra functionality or anything; I&amp;#39;ve added a few extra packages (such as particular syntax highlighting) and themes but outside of that, no major changes.  &lt;/p&gt;

&lt;p&gt;Here are some of Atom&amp;#39;s functionalities that I enjoy fully. It&amp;#39;s the little things!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I can change the theme and syntax highlighting super quickly and easily.&lt;/li&gt;
&lt;li&gt;It tells me which branch I&amp;#39;m currently on, how many package/theme updates are available, and if there&amp;#39;s anything wrong with the editor (like something was deprecated) at the very bottom.&lt;/li&gt;
&lt;li&gt;It changes the colours of my files in my document tree based on whether it&amp;#39;s new or modified (this might be because of a theme, but I loooove it!)&lt;/li&gt;
&lt;li&gt;Atom tells me how much added time a plugin or theme will cause Atom&amp;#39;s startup time to slow down.&lt;/li&gt;
&lt;li&gt;Adding new themes/plugins/functionality is super simple.&lt;/li&gt;
&lt;li&gt;If writing in markdown, typing &lt;code&gt;code&lt;/code&gt; then pressing tab autocompletes it to the ` triple tick marks, then you can add ruby to the end of that to get ruby syntax highlighting in your .md&amp;#39;s.&lt;/li&gt;
&lt;li&gt;Typing &lt;code&gt;pry&lt;/code&gt; then hitting tab autocompletes it to &lt;code&gt;binding.pry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Markdown preview seriously needs a lot more love.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a heads up, I currently use One Dark / Seti as my theme/syntax highlight.&lt;/p&gt;

&lt;p&gt;Note though, that the functionalities I was used to in Sublime still worked in Atom, and that was a huge relief and made the transition much smoother.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime&lt;/a&gt; is created by crazy Aussies. &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; is created by Github (aka, crazy SFers).&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +0. It&amp;#39;s an opinionated piece, what did you expect?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Dec 2015 07:25:51 -0800</pubDate>
        <link>http://risaonrails.com/thoughts-on-Atom/</link>
        <guid isPermaLink="true">http://risaonrails.com/thoughts-on-Atom/</guid>
        
        <category>editors</category>
        
        <category>atom</category>
        
        <category>sublime</category>
        
        
        <category>rails</category>
        
        <category>developer</category>
        
        <category>opinion</category>
        
      </item>
    
      <item>
        <title>HIPAA compliance</title>
        <description>&lt;p&gt;Readers, it&amp;#39;s been a while. So much has happened. Lately I have gotten to understand HIPAA law a bit better as it pertains to servers and hosting apps that have or use medical data. Let&amp;#39;s start first with some definitions. HIPAA stands for Health Insurance Portability and Accountability Act, which was passed by Congress back in &amp;#39;96.  It is enforced by the Dept of Health and Human Services (HHS).  For the purposes of app hosting, HIPAA is important for the electronic side of things, namely, protected health information (PHI) and personal identifiable information (PII).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR: You need to be HIPAA compliant and protect personal information if you&amp;#39;re gonna have a medical app or host a medical app.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order for a hosting provider to be compliant, it needs to meet certain requirements. These requirements are in the form of physical, technical, and administrative safeguards.  Let&amp;#39;s talk about each one.&lt;/p&gt;

&lt;h3 id=&quot;physical-safeguards&quot;&gt;Physical Safeguards&lt;/h3&gt;

&lt;p&gt;Servers that host PHI/PII need to have certain physical safeguards, such as facility access control, workstation access, etc. The good thing about this is that a lot of infrastructure as a service companies like Digital Ocean or Linode are already HIPAA compliant. The physical datacenters which host our lovely virtual servers have a lot of safety requirements by default, such as key card entry plus biometric login, etc.  Datacenters can also be certified at higher levels of security, such as SOC I and II certifications (Service Organization Control).&lt;/p&gt;

&lt;h3 id=&quot;technical-safeguards&quot;&gt;Technical Safeguards&lt;/h3&gt;

&lt;p&gt;Technical safeguards are things like access control, authentication systems, and secure transmissions. Thinking about technical safeguards is easiest from the app perspective. You will need unique logins, your database should be encrypted (easier to be encrypted before going into the db), and a record of who did what when.  From a server perspective, it&amp;#39;s ensuring that access to the server is limited and recorded and that the server is properly monitored for any breaches. You might also implement automatic logoff (both app and server).  This is the part where you implement services on the server like Fail2ban and have a bunch of firewall rules with all the ports turned off except the ones you absolutely need.&lt;/p&gt;

&lt;h3 id=&quot;administrative-safeguards&quot;&gt;Administrative Safeguards&lt;/h3&gt;

&lt;p&gt;Administrative safeguards isn&amp;#39;t just about writing up documentation to explain what the SOP is for when there&amp;#39;s a security breach, but it&amp;#39;s also for ensuring all personnel are properly trained to handle PHI/PII. You&amp;#39;ll have to do risk analysis and risk assessments (generally once a year) on your systems, which includes but isn&amp;#39;t limited to testing out disaster recovery plans, like server and data restoration in the event of a catastrophe. Reviewing your own policies and procedures is also required as a safeguard, such as reviewing how things are done and assessing whether or not the process in place is still effective or needs to be adjusted. Think of this as adjusting your Fail2ban settings to make sure it&amp;#39;s capturing and banning failed login attemps properly.  Finally, having a contingency plan is also part of the administrative safeguards. It makes sense to have backups of your database, but making sure you have a backup of your server is essential. It also helps to have a backup of a backup as well (the external server hosting the backup databases).  Finally, as a hosting company or as a medical app, you will most likely need a signed Business Associate Agreement between you and your client.&lt;/p&gt;

&lt;p&gt;Overall, HIPAA compliance seems like a daunting thing, but truthfully, the law is there to help us. We need to be smart about how we keep things running as a hosting company. And as long as if we keep our ducks in a row, being HIPAA compliant is actually really easy to do.&lt;/p&gt;

&lt;p&gt;The particular section we, as techies, need to be aware of with HIPAA regularion is CFR 164.308, 310, 312, 314, and 316.&lt;/p&gt;

&lt;p&gt;For more information, that section, along with the rest of the regulation can be found &lt;a href=&quot;http://www.hhs.gov/ocr/privacy/hipaa/administrative/combined/hipaa-simplification-201303.pdf&quot;&gt;here&lt;/a&gt;, in particular pages 62-69.&lt;/p&gt;

&lt;p&gt;Please note, I&amp;#39;ve over-simplified this. It&amp;#39;s good to actually read thru the regulation. It&amp;#39;s surprisingly very easy to understand. And when you&amp;#39;re dealing with engineering manuals, this is most definitely a breath of fresh air! :)&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +5&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Sep 2015 11:26:17 -0700</pubDate>
        <link>http://risaonrails.com/hipaa-compliance/</link>
        <guid isPermaLink="true">http://risaonrails.com/hipaa-compliance/</guid>
        
        <category>HIPAA</category>
        
        <category>servers</category>
        
        
        <category>rails</category>
        
        <category>devops</category>
        
        <category>hipaa</category>
        
      </item>
    
      <item>
        <title>Joomla migrations</title>
        <description>&lt;p&gt;Recently I&amp;#39;d been tasked to migrate a Joomla CMS from one hosting provider to another. As a Rails developer, I cried. A lot. Seriously, what the heck is &lt;a href=&quot;http://www.joomla.org/&quot;&gt;Joomla&lt;/a&gt;??&lt;/p&gt;

&lt;p&gt;Joomla is a CMS (content management system), much like WordPress. Apparently it&amp;#39;s the 2nd most popular CMS out there? (I thought Drupal was? What do I know, I barely know what CMS even is.)&lt;/p&gt;

&lt;p&gt;Anyway, first of all, I did the running away on your behalf. &amp;quot;Countless&amp;quot; hours pouring over tutorials and figuring out things. But...It really isn&amp;#39;t that hard to migrate your Joomla stuff from one server to another.&lt;/p&gt;

&lt;p&gt;Here is the general setup of the old server and new server. And the trials and tribulations I went thru. This was scary for me because it uses MySQL and PHP, 2 things I am rather unfamiliar with, but looking back, it wasn&amp;#39;t so bad at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Old Server&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 6.3&lt;/li&gt;
&lt;li&gt;MySQL 5.5&lt;/li&gt;
&lt;li&gt;httpd (and not Apache2)&lt;/li&gt;
&lt;li&gt;Joomla version ??? (more on this later)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;New Server&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04 LTS&lt;/li&gt;
&lt;li&gt;MySQL 5.6&lt;/li&gt;
&lt;li&gt;Apache2 (2.4.x)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-summary-of-steps&quot;&gt;The summary of steps&lt;/h2&gt;

&lt;p&gt;Here is what is going to happen and why.&lt;/p&gt;

&lt;p&gt;Joomla pages are in their own folders. You can pretty much transfer the folders as is, with their known directory structure, from one server to the other. And then you do a database backup and shove it into the new server. There&amp;#39;s some weird finicky settings that need to be changed, but that&amp;#39;s all small stuff. So since I like bulletted lists...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transfer Joomla pages from old server to new server&lt;/li&gt;
&lt;li&gt;Export and then import database dump&lt;/li&gt;
&lt;li&gt;Change about certain settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The task seemed a lot larger at the beginning when I first was handed it. But at the end of the day, it wasn&amp;#39;t so bad at all, only time consuming.&lt;/p&gt;

&lt;h4 id=&quot;transferring-of-joomla-files&quot;&gt;Transferring of Joomla files&lt;/h4&gt;

&lt;p&gt;The particular Joomla installation on the old server was at &lt;code&gt;/var/www/vhosts/&lt;/code&gt; with each site having their own directory. A lot of the tutorials I found had me FTPing the pages down to my local machine and then reFTP&amp;#39;ing it up. But...why put me in as middleman? That&amp;#39;s what &lt;code&gt;scp&lt;/code&gt; is for!  &lt;/p&gt;

&lt;p&gt;Save yourself a bit of time by adding in the &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt; key to your &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; file so you don&amp;#39;t have to put in root password.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# on old server as root&lt;/span&gt;
cat ~/.ssh/id_rsa.pub
&lt;span class=&quot;c&quot;&gt;# copy this&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# on new server&lt;/span&gt;
sudo nano ~/.ssh/authorized_keys
&lt;span class=&quot;c&quot;&gt;# paste the id_rsa.pub key into here&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# save and exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Time to copy the files.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# on the new server&lt;/span&gt;
sudo mkdir /var/www/vhosts
&lt;span class=&quot;c&quot;&gt;# on the old server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/www/vhosts
scp -r . root@123.123.123.123:/var/www/vhosts/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Depending on how many Joomla sites you&amp;#39;re moving and depending on your servers&amp;#39; connection speeds, this can take a very short time or a very very long time. I moved 5 sites and that took roughly 2 hours, which is surprising since it was going from one server to another and bypassing me. There was about 5 GB of data to be transferred though.&lt;/p&gt;

&lt;p&gt;While we&amp;#39;re at it, since the CentOS setup was using httpd (Apache), I got lazy and decided to transfer over the site.conf files for Apache. Why reinvent the wheel when you can just copy, after all?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# on the old server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/httpd/vhost.d/
scp -r . root@123.123.123.123:/etc/apache2/sites-available/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point I feel like I should re-name the article &amp;quot;how to use SCP&amp;quot; hah...&lt;/p&gt;

&lt;h4 id=&quot;export-and-import-mysql-database&quot;&gt;Export and Import MySQL database&lt;/h4&gt;

&lt;p&gt;I&amp;#39;m so much more familiar with Postgres that when it came to using MySQL, I freaked out a bit, admittedly. Being unfamiliar with how things were setup, I took the easy route and created a dump directly on the older server then &lt;code&gt;scp&lt;/code&gt; the dump to the new one. There were no show-stopping differences between 5.5 and 5.6 that I saw.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# on old server&lt;/span&gt;
mysqldump --all-databases &amp;gt; all_db.sql
scp -r all_db.sql root@123.123.123.123:/home/deploy/
&lt;span class=&quot;c&quot;&gt;# put it in any directory you want, really&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# on new server&lt;/span&gt;
mysql -u root -p &amp;lt; all_db.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fun fact, if you didn&amp;#39;t know this about mysql.... If you set up mysql root with a password and don&amp;#39;t have it locked down, any user can log into it, but they won&amp;#39;t see your databases at all. e.g. if you hop into mysql as user &lt;code&gt;deploy&lt;/code&gt; and show databases, nothing shows up. But if you log into mysql as &lt;code&gt;root&lt;/code&gt; then you see your databases. This really threw me for a loop.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# as user deploy&lt;/span&gt;
mysql
&lt;span class=&quot;c&quot;&gt;# then in mysql, list the databases&lt;/span&gt;
show databases&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# you shouldn&amp;#39;t see anything&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# now log in as root (with password)&lt;/span&gt;
mysql -u root -p
show databases&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# boom! all your databases are there&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, I digress.&lt;/p&gt;

&lt;h4 id=&quot;changing-settings-joomla&quot;&gt;Changing Settings - Joomla&lt;/h4&gt;

&lt;p&gt;Now that the files you need have been moved over, it&amp;#39;s time to adjust the settings. Again, I had about 5 Joomla sites, so I picked one to test things on.&lt;/p&gt;

&lt;p&gt;First, let&amp;#39;s focus on the Joomla settings.&lt;/p&gt;

&lt;p&gt;At this point, I realize I should have imported the data into a different mysql user account vs the root one, but, what&amp;#39;s done is done. Moving on.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/www/vhosts/site.com/public_html
sudo nano configuration.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Scroll down to find the database section near the top and change the settings to reflect which user you put the data under. The dump file should have created the databases for you and should be the same.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;public &lt;span class=&quot;nv&quot;&gt;$dbtype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
public &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
public &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;c&quot;&gt;# possibly change this&lt;/span&gt;
public &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;your_awesome_password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# change this&lt;/span&gt;
public &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;app_database&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# change this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and exit. This should be all you need to do for your Joomla settings.&lt;/p&gt;

&lt;h4 id=&quot;changing-settings-apache&quot;&gt;Changing Settings - Apache&lt;/h4&gt;

&lt;p&gt;There were some small differences between the httpd and Apache2 server settings so things needed to be updated/adjusted.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/apache2/sites-available/
sudo nano site.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adjust the ServerName and Directory block options. For instance, the + - symbols are no longer used in the Options, so I removed them accordingly. I also adjusted where my logs went. (I don&amp;#39;t like them in &lt;code&gt;/var/log/apache2/&lt;/code&gt; and prefer them in &lt;code&gt;/usr/share/apache2/logs/&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;I changed the ServerName from the domain to my IP address to make sure the site worked. I recommend this as well for you.&lt;/p&gt;

&lt;p&gt;If you have SSL certs that are needed, make sure to also transfer them over and adjust the apache settings.&lt;/p&gt;

&lt;p&gt;Save and exit. Enable that site and reload Apache2.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo a2ensite site.conf
sudo service apache2 restart &lt;span class=&quot;c&quot;&gt;# or reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are any errors and Apache won&amp;#39;t restart, correct them.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;http://123.123.123.123&quot;&gt;http://123.123.123.123&lt;/a&gt; (whatever your IP is) and confirm that your site loads properly and things are looking super fly.  Celebrate and then complete the crossover by switching the IPs for the domain.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +5&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jul 2015 09:25:52 -0700</pubDate>
        <link>http://risaonrails.com/joomla-migrations</link>
        <guid isPermaLink="true">http://risaonrails.com/joomla-migrations</guid>
        
        <category>joomla</category>
        
        <category>migrations</category>
        
        
        <category>joomla</category>
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Multiple Deploy Keys on a Server</title>
        <description>&lt;p&gt;Life in DevOps land has been pretty exciting for me. I&amp;#39;ve learned to create a tiered service (an app server + worker server), deal with RVM + upstart, finagle monit into submission, and most recently work with multiple SSH keys on one server.&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;You&amp;#39;ve got a server with 2-3 apps on it, and you&amp;#39;d like to use deploy keys for each app, but how do we keep them separate and how will the system know which to use? There&amp;#39;s a thing called a config file that can be used for our SSH keys. It&amp;#39;s kind of awesome.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll step through how to set it up and the like in this post.&lt;/p&gt;

&lt;h3 id=&quot;repo-examples&quot;&gt;Repo examples&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s pretend we have 2 repos, and both are hosted on Github:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App 1 = Surprise&lt;/li&gt;
&lt;li&gt;App 2 = Badger&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;server&quot;&gt;Server&lt;/h3&gt;

&lt;p&gt;The pretend server is going to be Ubuntu 14.04+. I&amp;#39;ll assume you&amp;#39;ve created a &lt;code&gt;~/.ssh&lt;/code&gt; directory and chmod&amp;#39;d it appropriately. On DigitalOcean, the directions for doing that &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04&quot;&gt;can be found here&lt;/a&gt; about midway down. We&amp;#39;ll skip their directions about creating keys.&lt;/p&gt;

&lt;h3 id=&quot;creating-ssh-keys&quot;&gt;Creating SSH Keys&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys/#platform-linux&quot;&gt;Github&amp;#39;s SSH key article&lt;/a&gt; is probably the best thing that&amp;#39;s happened on the internet for people like me since sliced bread. (But not since buttered and toasted sliced bread...)&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the abbreviated version of that article for our purposes, using our examples. Because examples are great! I&amp;#39;ll use Surprise (app 1) as the example since the steps are repeated for Badger (app 2).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh-keygen -t rsa -b &lt;span class=&quot;m&quot;&gt;4096&lt;/span&gt; -C &lt;span class=&quot;s2&quot;&gt;&amp;quot;devops@surprise&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# really, we don&amp;#39;t need to put an email. this just lets us know&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# that it&amp;#39;s the surprise repo we&amp;#39;re dealing with.&lt;/span&gt;
Enter file in which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/you/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: surprise_rsa
&lt;span class=&quot;c&quot;&gt;# here put in something like surprise_rsa then hit enter&lt;/span&gt;
Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;c&quot;&gt;# optional&lt;/span&gt;
Enter same passphrase again: &lt;span class=&quot;c&quot;&gt;# optional&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# these are optional but highly recommended&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should get some funky design/image after this. Repeat these for badger.&lt;/p&gt;

&lt;p&gt;Once both are set up, we can proceed to the next step, adding the keys to the ssh-agent. You want to run the eval statement once. This tripped me up a couple of times.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(ssh-agent -s)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this gets you a pid. Agent pid ####&lt;/span&gt;
ssh-add ~/.ssh/surprise_rsa
ssh-add ~/.ssh/badger_rsa
&lt;span class=&quot;c&quot;&gt;# you will probably have to add your passphrases in here. do it.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sanity check yourself by confirming that both SSH keys have been added.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh-add -l
&lt;span class=&quot;c&quot;&gt;# this should display both apps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;add-keys-to-repo&quot;&gt;Add Keys to Repo&lt;/h3&gt;

&lt;p&gt;Deploy keys. The only way I could really understand their functionality was that they are the server&amp;#39;s ssh keys that get put into a particular repo, so that particular key is the only one that&amp;#39;s allowed to read/write to that repo only. This prevents the key from accessing other repos. Usually we create ssh keys and attach them to our account, so we can then grab ANY repo we&amp;#39;re associated with. This can be dangerous, and it can cause problems if the associated member leaves the organization. (i.e., if I leave the company, the keys on the servers that I had attached to my account will no longer work)&lt;/p&gt;

&lt;p&gt;First, we&amp;#39;ll need to &lt;code&gt;cat&lt;/code&gt; the public keys. Let&amp;#39;s start with Surprise.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cat ~/.ssh/surprise_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Copy the &lt;code&gt;surprise_rsa.pub&lt;/code&gt; key, from &lt;code&gt;ssh-rsa&lt;/code&gt; all the way to &lt;code&gt;devops@surprise&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, go to Surprise&amp;#39;s repo in Github &amp;gt; Settings (right panel) &amp;gt; Deploy keys. The path will look like:&lt;br&gt;
&lt;a href=&quot;https://github.com/your_github/Surprise/settings/keys&quot;&gt;https://github.com/your_github/Surprise/settings/keys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on Add Deploy Key, name the key something you&amp;#39;d understand. &amp;quot;My awesome server&amp;#39;s deploy key&amp;quot; is totally OK. You&amp;#39;re the captain of this ship, after all. Paste in your key. Save.&lt;/p&gt;

&lt;p&gt;Repeat steps for Badger.&lt;/p&gt;

&lt;h3 id=&quot;create-ssh-config&quot;&gt;Create SSH Config&lt;/h3&gt;

&lt;p&gt;Now that we&amp;#39;ve got our 2 deploy keys set up, we need to make sure git knows which key to use and when, when we do our &lt;code&gt;git clones&lt;/code&gt; and &lt;code&gt;git pulls and pushes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a config file in &lt;code&gt;~/.ssh/&lt;/code&gt; called config.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nano ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The file will be in this format:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# surprise github&lt;/span&gt;
Host surprise
  Hostname github.com
  User git
  IdentityFile ~/.ssh/surprise_rsa

&lt;span class=&quot;c&quot;&gt;# badger github&lt;/span&gt;
Host badger
  Hostname github.com
  User git
  IdentityFile ~/.ssh/badger_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s break this down.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Host&lt;/strong&gt; can be whatever you want. It can be &lt;code&gt;asdfjkl;&lt;/code&gt; for all we care.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hostname&lt;/strong&gt; is github.com as that&amp;#39;s where our repo is at.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User&lt;/strong&gt; is git, because we are SSH&amp;#39;ing to github. (You know, &lt;a href=&quot;mailto:git@github.com&quot;&gt;git@github.com&lt;/a&gt;...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IdentityFile&lt;/strong&gt; is the private key for that repo. Remember, we associated it&amp;#39;s public key to the repo, so we need the matching private key for the connection to work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Save and exit!&lt;/p&gt;

&lt;h3 id=&quot;setting-up-the-repos&quot;&gt;Setting up the repos&lt;/h3&gt;

&lt;p&gt;Assuming we haven&amp;#39;t pulled down the repos to the server, we&amp;#39;ll do that now. I know you&amp;#39;re inclined to copy paste the SSH URL from Github: &lt;code&gt;git@github.com:your_github/surprise.git&lt;/code&gt; &lt;em&gt;BUT DON&amp;#39;T DO IT&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DON&amp;#39;T YOU DARE!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instead, you will do this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone git@surprise:your_github/surprise.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do you see it? &lt;code&gt;github.com&lt;/code&gt; was replaced with &lt;code&gt;surprise&lt;/code&gt;. It forces git to look at the SSH config file and be like &amp;quot;What is this host called surprise? Oh, we&amp;#39;re going to use this identity file and connect to this repo on github! Ok got it!&amp;quot;&lt;/p&gt;

&lt;p&gt;At that point, your origin will be pointing to &lt;code&gt;surprise&lt;/code&gt; and you&amp;#39;ll be able to do &lt;code&gt;git pull origin master&lt;/code&gt; or &lt;code&gt;git push origin master&lt;/code&gt; and life will be deliciously fabulous.&lt;/p&gt;

&lt;p&gt;Repeat this for badger, of course.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: If you&amp;#39;ve already cloned, you can change your origin to point to the above URL instead and that&amp;#39;ll solve your issues.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Serious thanks to &lt;a href=&quot;http://stackoverflow.com/a/14703929/2464546&quot;&gt;this StackOverflow answer&lt;/a&gt; that cleared things up for me.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +10&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Wed, 20 May 2015 05:40:53 -0700</pubDate>
        <link>http://risaonrails.com/multiple-deploy-keys-on-a-server/</link>
        <guid isPermaLink="true">http://risaonrails.com/multiple-deploy-keys-on-a-server/</guid>
        
        <category>devops</category>
        
        <category>guide</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Mounting excitement</title>
        <description>&lt;p&gt;I used to be risk-averse. But now? Totally not. In fact, I may be ever so slightly an adrenaline junkie. And I love every bit of it.  &lt;/p&gt;

&lt;p&gt;Maybe a few years ago I found a pair of &lt;em&gt;&amp;quot;see the world thru the eyes of a 3 yr old&amp;quot;&lt;/em&gt; glasses, but ever since then, life is pretty awesome.&lt;/p&gt;

&lt;h3 id=&quot;so-why-am-i-excited&quot;&gt;So why am I excited?!&lt;/h3&gt;

&lt;p&gt;Because we&amp;#39;re going on an &lt;em&gt;ADVENTURE&lt;/em&gt;, Charlie! Yeah, Charlie, an adventure!&lt;/p&gt;

&lt;p&gt;No really though. I love adventures. Everything is an adventure! It&amp;#39;s totally not limited to going to new places. It&amp;#39;s everything. Heck, every day is an adventure!&lt;/p&gt;

&lt;p&gt;So really, why am I this excited?&lt;/p&gt;

&lt;p&gt;I&amp;#39;m going to Vancouver, Canada for a month. Ok ok, it may not seem like such a big deal, but here&amp;#39;s where it gets more interesting.&lt;br&gt;
1. I have never been to Vancouver.
1. Women&amp;#39;s World Cup soccer games are there!
1. I&amp;#39;m going to at least 4 Cup games!
1. I can work remotely anywhere I want!
1. Did I mention Women&amp;#39;s World Cup soccer?
1. I&amp;#39;m going to get me a Finals ticket, darn it.&lt;/p&gt;

&lt;p&gt;So how did this all come to be? What made me decide to do something kinda crazy (for me)? Simple answer: The hairs on the back of my neck are standing up. I&amp;#39;m scared to go! And that means that I&amp;#39;ve got to do this. I can do this, and I&amp;#39;m going to have a blast!&lt;/p&gt;

&lt;h3 id=&quot;no-really&quot;&gt;No really.&lt;/h3&gt;

&lt;p&gt;In reality, I was talking about soccer in Slack with my team and realized that this year was Women&amp;#39;s World Cup. I love watching soccer, and women&amp;#39;s soccer is by far more entertaining than men&amp;#39;s. Why? They don&amp;#39;t flop about like wet fish on the field; they are a lot more brutal with their tackles; and Abby Wambach is the highest goal scorer (int&amp;#39;l games) on the face of the planet at currently 178 goals. The closest man is Ali Daei at 105, for comparison. Just saying. On top of it, Men&amp;#39;s World Cup is so much more expensive, and I have no desire to go to the next few countries for their Cup games.&lt;/p&gt;

&lt;p&gt;On top of it, it&amp;#39;s in Vancouver, just a short flight away! Because my job is already remote, I can even work from there. So I started calculating things out and decided that going for almost the entire month of June made sense. Financially, not really, but whatever. We&amp;#39;ve only got this life, we might as well enjoy every bit of it!&lt;/p&gt;

&lt;p&gt;It really helps that I&amp;#39;ve no ties to SF. And maybe I&amp;#39;ll end up falling in love with Vancouver and spend more time up there. Anything&amp;#39;s possible.  (I still love you, SF. But y&amp;#39;know. &lt;em&gt;You know why.&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&quot;what-about-your-birthday&quot;&gt;What about your birthday?&lt;/h3&gt;

&lt;p&gt;Psh. GTFO. Birthdays ain&amp;#39;t got nuttin&amp;#39; on dis! Birthdays are just another day of disappointment for me -- I say this as my birthday is a few days away, and the disappointment is ever increasing.&lt;/p&gt;

&lt;h3 id=&quot;ahhhh&quot;&gt;AHHHH!&lt;/h3&gt;

&lt;p&gt;Oh my effing gawd. I&amp;#39;ve never been to a soccer match before! So many firsts! I&amp;#39;m going to so many games! AHHHH. And I hear Vancouver is so pretty, and it&amp;#39;s a walkable city! And all the nature trails! It&amp;#39;s totally gay friendly too! You can&amp;#39;t get any better than this right now for me!  Now to experience other new things outside of soccer!&lt;/p&gt;

&lt;p&gt;...Secretly-not-so-secretly, I think that if I fall in love with this city and then some, I may spend more time up there. 2-3 months at a time! Geezus, I love working remotely.&lt;/p&gt;

&lt;p&gt;How does one sleep with this excitement?!?&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +1 for getting to know me better?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Apr 2015 16:34:32 -0700</pubDate>
        <link>http://risaonrails.com/mounting-excitement/</link>
        <guid isPermaLink="true">http://risaonrails.com/mounting-excitement/</guid>
        
        <category>offtopic</category>
        
        
        <category>offtopic</category>
        
      </item>
    
      <item>
        <title>Monitoring Nginx&#39;s Passenger</title>
        <description>&lt;p&gt;In the ever learning world I&amp;#39;m in, someone had commented on &lt;a href=&quot;/integrate-monit-with-slack/&quot;&gt;my post&lt;/a&gt; about monitoring Passenger.&lt;/p&gt;

&lt;p&gt;That got me thinking and diving deep into the depths of Google to find a solution that was acceptable for those of using Nging to create the Passenger instances.&lt;/p&gt;

&lt;p&gt;The most common search result for this was to use the gem &lt;a href=&quot;https://github.com/romanbsd/passenger_monit&quot;&gt;passenger-monit&lt;/a&gt;. However it hasn&amp;#39;t been updated in at least 2 years. I am not that ambitious enough to revive this gem for my own purposes. The biggest drawback for using this gem is that the rack PIDs are hardcoded and if the first one dies, Monit will complain. It isn&amp;#39;t ideal for my purposes since I run multiple apps on one server and I&amp;#39;d like to keep track of them individually.&lt;/p&gt;

&lt;p&gt;HOWEVER~! I have found a way that seems to work.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;

&lt;p&gt;There&amp;#39;s a method called &lt;code&gt;matching&lt;/code&gt; that monit allows. Essentially monit does a &lt;code&gt;ps aux | grep &amp;#39;whatever thing&amp;#39;&lt;/code&gt; to check for a process. &lt;a href=&quot;http://serverfault.com/questions/523226/monit-daemonize-non-daemon-process&quot;&gt;Holy balls, I love you person on ServerFault who answered this&lt;/a&gt; and I wish I had the reputation to upvote the crap out of that answer. But instead, mad props to you. &lt;/p&gt;

&lt;p&gt;Anyway, after reading that, everything became clear.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what I ended up doing. &lt;/p&gt;

&lt;h4 id=&quot;the-example-setup&quot;&gt;The example setup&lt;/h4&gt;

&lt;p&gt;Assume the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nginx + passenger (Passenger is spawned via Nginx)

&lt;ul&gt;
&lt;li&gt;there is no passenger PID file that exists&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rails app named &amp;#39;Surprise&amp;#39; 

&lt;ul&gt;
&lt;li&gt;nginx configured to point to &lt;code&gt;/home/rails/Surprise/public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Deployer user named &amp;#39;rails&amp;#39;&lt;/li&gt;
&lt;li&gt;Monit version 5.6 or 5.8 is running&lt;/li&gt;
&lt;li&gt;Digital Ocean droplet for server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, if you have not hit Surprise at all, you won&amp;#39;t have any passenger instances created. That makes sense. Why spawn a process when it isn&amp;#39;t being used? &lt;/p&gt;

&lt;p&gt;The process is brutally simple, hit the app to spawn a Passenger process, then check &lt;code&gt;top&lt;/code&gt; to see what the name is and create the monit file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;top -c
&lt;span class=&quot;c&quot;&gt;# hit shift M to sort by memory&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# you should see near the top right&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Passenger RubyApp: /home/rails/surprise/public &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# copy paste that&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo nano /etc/monit/conf.d/surprise-pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now in this file, write in the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;check process surprise-pass matching &lt;span class=&quot;s1&quot;&gt;&amp;#39;Passenger RubyApp: \/home\/rails\/surprise\/public&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; totalmem &amp;gt; 35% &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/slack.rb
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; totalmem &amp;gt; 60% &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/touch_surprise_sh  &lt;span class=&quot;c&quot;&gt;# restart app&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; changed pid &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/slack.rb              &lt;span class=&quot;c&quot;&gt;# sanity check&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; totalcpu &amp;gt; 25% &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/slack.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and exit. Notice the &lt;code&gt;\&lt;/code&gt; marks to escape the &lt;code&gt;/&lt;/code&gt; marks. Because monit does essentially a &lt;code&gt;ps aux | grep ____&lt;/code&gt;, copy pasting what you find in &lt;code&gt;top -c&lt;/code&gt; is a great way to get the process match.&lt;/p&gt;

&lt;p&gt;A couple of things to note. 1) There is also a new file being executed here. More on this in a bit. 2) We are talking totalmem and totalcpu. Passenger can spin up child processes if it needs it, but I want to look at the total memory consumption of that particular app. Total cpu is not per core but for the whole thing. I also based these off of monit&amp;#39;s web interface information. It&amp;#39;s very handy to pick out the things you want to monitor in particular.&lt;/p&gt;

&lt;p&gt;The new file &lt;code&gt;touch_surprise_sh&lt;/code&gt; is a super simple bash script that restarts Passenger (and not Nginx) via the &lt;code&gt;touch&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo nano /etc/monit/touch_surprise_sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the file type the following lines:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/bash

touch /home/rails/surprise/tmp/restart.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively you can make it more verbose and sudo in as your user (rails) to restart Passenger.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo -u rails -H sh -c &amp;quot;touch /home/rails/surprise/tmp/restart.txt”
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and exit. Make it into an executable file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo chmod +x /etc/monit/touch_surprise_sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do your standard monit sanity check, then reload monit.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo monit -t       &lt;span class=&quot;c&quot;&gt;# fix any problems, obv&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo monit reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Confirm on your web interface that surprise-pass is loaded up and displaying all the goodies you like to see. When you restart nginx, Passenger should lose a PID. It&amp;#39;ll alert you on Slack when you hit the app and create a new PID. Right on. &lt;img class=&#39;emoji&#39; title=&#39;fist&#39; alt=&#39;fist&#39; src=&#39;https://github.global.ssl.fastly.net/images/icons/emoji/fist.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; &gt;&lt;/p&gt;

&lt;p&gt;Congrats! Create a monit conf file for each of your apps and behold your power!&lt;/p&gt;

&lt;p&gt;Special thanks to Grant Trevor who got me to delve into the depths of monit and Google &lt;img class=&#39;emoji&#39; title=&#39;grinning&#39; alt=&#39;grinning&#39; src=&#39;https://github.global.ssl.fastly.net/images/icons/emoji/grinning.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; &gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +5&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Apr 2015 14:21:01 -0700</pubDate>
        <link>http://risaonrails.com/monitoring-nginx-and-passenger/</link>
        <guid isPermaLink="true">http://risaonrails.com/monitoring-nginx-and-passenger/</guid>
        
        <category>monit</category>
        
        <category>passenger</category>
        
        
        <category>guide</category>
        
        <category>devops</category>
        
        <category>monit</category>
        
        <category>passenger</category>
        
      </item>
    
      <item>
        <title>Woohoo, Nginx training!</title>
        <description>&lt;p&gt;I freaking love San Francisco. Seriously. It&amp;#39;s pretty much the center of everything tech related. And if it&amp;#39;s not in the city, then it&amp;#39;s in Silicon Valley, just a short trip away (depending on what time you leave).&lt;/p&gt;

&lt;p&gt;I also secretly love Twitter. Why? Because every single conference, meetup, or event I&amp;#39;ve wanted to attend has either been retweeted into my feed or has popped up as a suggested tweet / ad. Yeah, Twitter&amp;#39;s algorithm is brilliant. Gotta hand it to them. &lt;/p&gt;

&lt;p&gt;So what&amp;#39;s any of this got to do with Nginx? Well the other day I tweeted about something I learned with Nginx and their location blocks. Not long after, when I was checking my feed, I saw a suggested ad/tweet thingy that said something about an Nginx User Summit and Training thing happening relatively soon and in SF. I clicked on it. Hold the phone. There&amp;#39;s going to be a fundamentals of training course?! This is perfect! My coworker and I have been flailing our arms trying to learn and properly use Nginx for about a couple of weeks, and here there was a 1-day training being offered!&lt;/p&gt;

&lt;p&gt;We spoke to the boss lady who immediately said yes and bought our tickets for us (early bird tix were about $145 incl silly service fees and taxes). We were off to training! Truth is, even if she didn&amp;#39;t pay for it, I would have footed the bill because I saw that training to be crucial to my own success. Thankfully our boss is super awesome and encourages learning.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://swagct.com/generators/images/successkid_thumb.jpg&quot; alt=&quot;Success kid&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;training-day&quot;&gt;Training Day&lt;/h3&gt;

&lt;p&gt;The Summit/Training was held at RocketSpace in downtown SF. The space was really nice, and we were given a bunch of different swag (tees, water bottles, cute lil cars with M&amp;amp;Ms in them, an O&amp;#39;Reilly book about microservices, etc). The best part was the fact that the tables were lined with paper and had crayons. :D Oh yeah the 12-yr-old me was stoked!&lt;/p&gt;

&lt;p&gt;Training started promptly at 9:30 and went over the basics of how to install and configure Nginx. We were all given AWS EC2 or Digital Ocean droplets to work with. My coworker and I lucked out with DO boxes (who needs some long URL to type in for ssh&amp;#39;ing? Just give me a freaking IP!)&lt;/p&gt;

&lt;p&gt;The pace was pretty good (admittedly a bit slow for my tastes) and was very comprehensive. It went over what each of the major blocks/contents and common directives were, how to set up SSL, how to set up multiple apps, load balancing, and how to act like a proxy server. All the things I needed to really learn were covered. Between each section was a 5-10min break for people to attempt the &amp;#39;exercise&amp;#39;, which was stepped thru by the instructor prior, so it wasn&amp;#39;t anything extremely complicated.&lt;/p&gt;

&lt;p&gt;I only really recall 2-3 Nginx folks walking around to check to see if anyone needed extra assistance, tho there were about 10-12 Nginx folks overall. The guys sitting across from us needed some assistance because their boxes didn&amp;#39;t have port 8080 open (or listening, rather), which couldn&amp;#39;t be resolved for whatever reason, even with a couple of Nginx folks helping out. &lt;/p&gt;

&lt;p&gt;The final exercise was more complicated and right up my alley - a task to set up Nginx as backend and proxy servers, incorporating things we&amp;#39;ve already learned as well as proxy caching. The answers are apparently going to be emailed to us later so I&amp;#39;ll check against that once we receive it.&lt;/p&gt;

&lt;p&gt;Once training was over, the lightning talks began. Admittedly, this was where my interest wained, tho the guy talking about load testing with a thing called Bees with Machine Guns was really cool. My coworker and I opted not to stay until the end for the social hour and excused ourselves. &lt;/p&gt;

&lt;h3 id=&quot;overall-thoughts&quot;&gt;Overall thoughts&lt;/h3&gt;

&lt;p&gt;Seriously, this training was kind of amazingly perfect timing for my coworker and myself. Would I recommend it? Hellz yes! It&amp;#39;s the perfect beginner course to anyone getting to know and understand Nginx. It&amp;#39;s really simple to use, now that I understand it better. It was also validating to know that the things we were teaching ourselves by fiddling around with the servers were all correct.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m always game on attending training of any sort. Really glad I was able to go to this particular one. I hope to attend more and different training courses.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +1. Attending the training and learning something is +10 life exp!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Apr 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/woohoo-nginx-training/</link>
        <guid isPermaLink="true">http://risaonrails.com/woohoo-nginx-training/</guid>
        
        <category>devops</category>
        
        <category>nginx</category>
        
        <category>training</category>
        
        
        <category>nginx</category>
        
        <category>rails</category>
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Creating new old-version Rails apps</title>
        <description>&lt;p&gt;As always, a work story. Here at Team DevOps, we&amp;#39;ve been tasked to create a couple of Rails apps using different Ruby versions. After all, why not? We&amp;#39;re also Rails developers too, even if we don&amp;#39;t look like it. Admittedly, it&amp;#39;s been so long since I&amp;#39;ve started a Rails app from scratch I almost forgot how to do &lt;code&gt;rails new&lt;/code&gt;... Yeah, only slightly embarrassed.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m more familiar with Ruby 2.0.0 and Rails 4.0.x than 2.2.x and 4.2.x, so I decided to make my app using the older versions. Of course, I&amp;#39;ve since updated my rubies and rails versions, so without thinking much about it, I did &lt;code&gt;rails new&lt;/code&gt;. Figured I could just bundle update when I switched ruby/rails versions.&lt;/p&gt;

&lt;p&gt;Oh god, that was a terrible, TERRIBLE mistake.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.nicknotas.com/wp-content/uploads/2013/04/Ive_Made_a_Huge_Mistake.jpg&quot; alt=&quot;Huge mistake&quot;&gt;&lt;/p&gt;

&lt;p&gt;What got created was an awesomely standard Rails 4.2.0 app with Ruby 2.2.0. No problem. In my Gemfile I added in &lt;code&gt;ruby 2.0.0&lt;/code&gt; and bundle updated and thought nothing of it. I moved on and edited my database.yml file and decided to add some of my standard gems I&amp;#39;d be using for TDD: guard and spork. But since it was rails 4.2, I wasn&amp;#39;t sure how my guard/spork setup would work, since I was plugging and chugging from an old 4.0.x app I had. Well, whatever.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll just change rails 4.2.x to rails 4.0.x! No problemo!! Lemme bundle update and then run &lt;code&gt;guard init rspec&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stream1.gifsoup.com/view/897102/mushroom-cloud-o.gif&quot; alt=&quot;Kaboom!&quot;&gt;&lt;/p&gt;

&lt;p&gt;What. Have. I. Done. Guard was complaining that I had started things up with a newer version so it wouldn&amp;#39;t be able to use the version 4.0.13 wanted (2.6). Not only that but &lt;code&gt;rails g anything&lt;/code&gt; wasn&amp;#39;t working either. Geezus. So I completely uninstalled guard and then installed only the correct version, but even then the Guardfile created seemed weird. Rails didn&amp;#39;t let me install rspec either without complaining. Not to mention Rake. Oy vey. How much had changed between Rails 4.0 and 4.2??! What is this business about &lt;code&gt;activejob_railties&lt;/code&gt;??&lt;/p&gt;

&lt;p&gt;OK, there were some major changes that I haven&amp;#39;t really been paying attention to. ActiveJob was a new addition to 4.2. On top of that, the &lt;code&gt;config/initializers/application.rb&lt;/code&gt; file format had changed from referencing the &lt;code&gt;AppName::Application...&lt;/code&gt; to &lt;code&gt;Rails.application...&lt;/code&gt; Then there were the additional railties that were added in. This is just the tip of the iceberg...&lt;/p&gt;

&lt;p&gt;Yeah let&amp;#39;s queue up the whole &lt;code&gt;I don&amp;#39;t know what I&amp;#39;m doing&lt;/code&gt; meme here. Seriously. At this point the only thing I could sensibly do was to completely start over and create a Rails 4.0.x app. But how would I do that?? &lt;/p&gt;

&lt;p&gt;The Rails guides didn&amp;#39;t have any indication on how to reference versions when creating it, so off to Google and StackOverflow.&lt;/p&gt;

&lt;h3 id=&quot;the-way-of-the-old-rails-warrior&quot;&gt;The way of the old rails warrior&lt;/h3&gt;

&lt;p&gt;I can just refer an older Rails version when doing &lt;code&gt;rails new&lt;/code&gt;! Since I wanted 4.0.13, I did this: &lt;code&gt;rails 4.0.13 new appname&lt;/code&gt;. This did not work.&lt;/p&gt;

&lt;p&gt;My syntax was incorrect, and maybe I need rails 4.0.13 installed. I also wanted to build the app with ruby 2.0.0 so in the end these were the correct steps. (I use rbenv on my machine, and apparently didn&amp;#39;t have gems for p643 so used p451.)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv global 2.0.0-p451
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install rails 4.0.13
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails _4.0.13_ new appname&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Please note the &lt;code&gt;_&lt;/code&gt; surrounding the version. This is key! Once I did that and installed the app, everything was set properly. I created a rails 4.0.x app that was locked in with ruby 2.0.0. FINALLY. Bundle installed, set up guard and spork and rspec and I was on my merry way to coding heaven. I commited that sucker faster than a speeding bullet.&lt;/p&gt;

&lt;p&gt;Now, how do I write new models again...?&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +1 for super obscure learnings.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Apr 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/creating-new-old-version-rails-apps/</link>
        <guid isPermaLink="true">http://risaonrails.com/creating-new-old-version-rails-apps/</guid>
        
        <category>rails</category>
        
        <category>tip</category>
        
        
        <category>rails</category>
        
        <category>development</category>
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>Jekyll: The blog maker</title>
        <description>&lt;p&gt;As you may have figured out, I use Jekyll to create my Github Pages. And boy did I have a hard time understanding what the heck was going on. I dunno, maybe docs and I just don&amp;#39;t get along. Most of the how-to guides out there were like &amp;quot;oh yeah rip off this template from this site and start using jekyll!&amp;quot; but that feels like a cop-out to me, and I like to bash my head into the wall. Or keyboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.kym-cdn.com/photos/images/masonry/000/021/531/SmashingHeadOnKeyboard.gif&quot; alt=&quot;Bash your head in&quot;&gt;&lt;/p&gt;

&lt;p&gt;Pretty. Much. Every. Day.&lt;/p&gt;

&lt;p&gt;Anyway, here&amp;#39;s what I&amp;#39;ve learned thus far with using Jekyll and Github Pages. Maybe this will help you out, too. I hope to expand my knowledge as well.  Glad that it&amp;#39;s written in Ruby, so implementation of things are much easier to understand (for me).&lt;/p&gt;

&lt;h3 id=&quot;gt-github-pages-overview&quot;&gt;&amp;gt; Github Pages Overview&lt;/h3&gt;

&lt;p&gt;First issue I did not realize, and maybe I should have actually &lt;em&gt;read&lt;/em&gt; the instructions better,... there is a HUGE difference between creating a Github Page for a repo and for your account. I wanted to create one for my account but made it for my repo instead. Whoops.&lt;/p&gt;

&lt;p&gt;Github &lt;a href=&quot;https://pages.github.com/&quot;&gt;explains this fairly well&lt;/a&gt;, but here&amp;#39;s my version for one-stop shopping goodness. I assume you&amp;#39;re a developer and are knowledgable about the standard &lt;code&gt;git&lt;/code&gt; type of commands.&lt;/p&gt;

&lt;p&gt;On your local machine, install Jekyll.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install jekyll&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;gt-github-pages-for-your-github-account&quot;&gt;&amp;gt; Github Pages for your github account&lt;/h3&gt;

&lt;p&gt;Create a new repo in Github called &amp;quot;your-github-username.github.io&amp;quot;. In my case it&amp;#39;s a repo called &amp;quot;rbatta.github.io&amp;quot; since my Github username is rbatta. When you git clone to your local machine, your &lt;code&gt;master&lt;/code&gt; branch will be the one Github uses to publish your site. You get that? &lt;em&gt;Master branch is what Github uses to publish your site.&lt;/em&gt; Git clone your new repo and hop into that directory.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If you create a repo and name it whatever you want and NOT &amp;quot;your-username.github.io&amp;quot;, Github will see this as a Page for your Repo. When this happens, Github will use the branch called &lt;code&gt;gh-pages&lt;/code&gt; instead of &lt;code&gt;master&lt;/code&gt; to auto-publish your site. It&amp;#39;s confusing and tripped me up massively in the beginning.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com/your-github-username/your-github-username.github.io.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For sanity&amp;#39;s sake, before you hop into your directory, create a new directory and call it whatever you want. If it makes it easier for you, call it what you want your site to be called. Is it your blog? Call it that. Since I booched the whole Github Pages account vs repo thing, I already had a repo called &lt;code&gt;risa-on-rails&lt;/code&gt; so I used this. This new directory thing will come in handy later. Trust me.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir your-sites-blog-name
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;your-sites-blog-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great! Now I realize this is an empty directory. It&amp;#39;s cool. Time to create a new Jekyll blog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But wait!&lt;/strong&gt; Why are we in &lt;code&gt;your-sites-blog-name&lt;/code&gt; and not in &lt;code&gt;your-username.github.io&lt;/code&gt; directory? Well, like I said before, the &lt;code&gt;master&lt;/code&gt; branch is what Github uses to publish your blog. &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; publish your repo. We&amp;#39;ll keep the &lt;code&gt;master&lt;/code&gt; directory clean until we&amp;#39;re ready to push things up. So in the meantime, we&amp;#39;ll use the &lt;code&gt;your-sites-blog-name&lt;/code&gt; directory to do all of our work.&lt;/p&gt;

&lt;h3 id=&quot;gt-jekyll-setup&quot;&gt;&amp;gt; Jekyll setup&lt;/h3&gt;

&lt;p&gt;Create a new Jekyll site by running &lt;code&gt;jekyll new .&lt;/code&gt; Make sure you&amp;#39;ve got that period in there, since that creates it within this directory.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll new .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Jekyll will install a bunch of directories with &lt;em&gt;&amp;#39;s in them along with some other files, including a `&lt;/em&gt;config.yml` file. This file will be the driver of just about everything: name it here and use it everywhere!&lt;/p&gt;

&lt;p&gt;Create 2 directories called &lt;code&gt;_plugins&lt;/code&gt; and &lt;code&gt;_drafts&lt;/code&gt;. Because you may want/need them.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir _plugins _drafts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is probably a good time to do &lt;code&gt;git init&lt;/code&gt; and do your initial commit.&lt;/p&gt;

&lt;h3 id=&quot;gt-_config-yml&quot;&gt;&amp;gt; _config.yml&lt;/h3&gt;

&lt;p&gt;Fill in the information given. For &lt;code&gt;baseurl:&lt;/code&gt; keep that as blank quotes so that when you serve up your site, it&amp;#39;ll load at &lt;code&gt;127.0.0.1:4000&lt;/code&gt; instead of &lt;code&gt;127.0.0.1:4000/baseurl-you-gave-it&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you change any of the variables, make sure you change them in the css and anywhere else in the other files. For me, I changed the &lt;code&gt;:title&lt;/code&gt; symbol to &lt;code&gt;:name&lt;/code&gt; for the name of my blog. Anywhere where &lt;code&gt;site.title&lt;/code&gt; was referenced, I changed to &lt;code&gt;site.name&lt;/code&gt;. That includes the css file too. I did this because I added in a &lt;code&gt;permalink: /:title/&lt;/code&gt; option to give all my pages their own permalinks instead of the weird directory structure Jekyll uses.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/:title/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;gt-_posts-and-_drafts&quot;&gt;&amp;gt; _posts/ and _drafts/&lt;/h3&gt;

&lt;p&gt;By default, anything that you put in the _posts directory will be published. Of course you need to make sure it&amp;#39;s in the format of &lt;code&gt;yyyy-mm-dd-post-name&lt;/code&gt; with whatever extension you use. I prefer markdown so all my posts end with &lt;code&gt;.md&lt;/code&gt;. You&amp;#39;re the author of your blogposts so choose whatever format you&amp;#39;d like: Textile or Markdown are the two default choices Jekyll supports. You can choose others with plugins.&lt;/p&gt;

&lt;p&gt;The _drafts folder is exactly that, for drafts. You don&amp;#39;t need to append dates to it. In fact, when you&amp;#39;re ready to publish it, that&amp;#39;s when you can append dates. For that, we&amp;#39;ve got a handy tool, the &lt;a href=&quot;https://github.com/gummesson/jekyll-rake-boilerplate&quot;&gt;jekyll-rake-boilerplate Rakefile&lt;/a&gt;. Copy that Rakefile into your repo. Now you&amp;#39;ve got some added jekyll capabilities like: &lt;code&gt;rake watch[&amp;quot;drafts&amp;quot;]&lt;/code&gt; which is the equivalent to &lt;code&gt;jekyll serve --watch --drafts&lt;/code&gt;, and &lt;code&gt;rake draft[&amp;quot;your post&amp;#39;s title&amp;quot;]&lt;/code&gt; which creates a new draft post with the given title. Sweetness. &lt;code&gt;rake publish&lt;/code&gt; let&amp;#39;s you pick the draft you want to publish and appends the date automagically to your post, moving it from _drafts to _posts and eliminating the need to wonder what day it currently is.&lt;/p&gt;

&lt;p&gt;To use the &lt;code&gt;rake draft[&amp;quot;title&amp;quot;]&lt;/code&gt; task, create a file called &lt;code&gt;_post.md&lt;/code&gt; in the root directory. In your &lt;code&gt;_config.yml&lt;/code&gt; add in the following so your rake task won&amp;#39;t break when it&amp;#39;s run:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;post:
  template: _post.md
  extension: md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In your &lt;code&gt;_post.md&lt;/code&gt; file, you need to ensure that you&amp;#39;ve got the YAML markup at the beginning with the --- thing. If you need a template, copy paste it from the Rakefile site or use the welcome-to-jekyll post&amp;#39;s YAML header. Think of this as your template for ALL your posts. Update as you see fit.&lt;/p&gt;

&lt;h3 id=&quot;gt-_plugins&quot;&gt;&amp;gt; _plugins&lt;/h3&gt;

&lt;p&gt;There are some cool plugins for added functionality for Jekyll. However when publishing to Github, that&amp;#39;s stripped away and is not built when the site is published. Something something safety precautions. Ehhh. This is why we created a separate directory to work in. The &lt;code&gt;your-sites-blog-name&lt;/code&gt; directory has all your drafts and posts and plugins and directories, but we will be creating the &amp;#39;static&amp;#39; website and pushing that to the &lt;code&gt;your-username.github.io&lt;/code&gt; directory for the master branch, to deploy to Github to publish. Wow, that came off a bit more complicated than I expected. Here&amp;#39;s the workflow.  We&amp;#39;ll go more into detail later on with this.&lt;/p&gt;

&lt;p&gt;Start in your-sites-blog-name dir &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; create draft posts and stuff &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; rake publish draft &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; jekyll build site &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; copy &lt;em&gt;ONLY&lt;/em&gt; the &lt;code&gt;_site&lt;/code&gt; directory contents to your-username.github.io directory &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; cleanup anything you need and git add, commit &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; push to github &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; ??? &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; profit!&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s start by adding in my favourite simple plugin, the &lt;a href=&quot;https://gist.github.com/23maverick23/8532525&quot;&gt;jekyll-font-awesome&lt;/a&gt; plugin. Create a file in &lt;code&gt;_plugins/&lt;/code&gt; called &lt;code&gt;font_awesome.rb&lt;/code&gt; and paste the contents from that gist into this file. If you&amp;#39;re not familiar with fontawesome.io, it&amp;#39;s a bunch of rad icons for everything. Paste the link below into your head.html file at around line 6: &lt;code&gt;_includes/head.html&lt;/code&gt;, just like that.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can add icons by using the syntax &lt;code&gt;{.% icon fa-something %}&lt;/code&gt; (without the period in there). Go buck-wild and add some icons and stuff to your site! Wahoo!&lt;/p&gt;

&lt;h3 id=&quot;gt-publishing&quot;&gt;&amp;gt; Publishing&lt;/h3&gt;

&lt;p&gt;When you are ready to publish, build the site with Jekyll by running &lt;code&gt;jekyll build&lt;/code&gt;.  This creates a directory called &lt;code&gt;_site/&lt;/code&gt; which houses the raw ol&amp;#39; school HTML of your posts with a css directory that the pages reference.&lt;/p&gt;

&lt;p&gt;OK. Remember the workflow up above? Let&amp;#39;s break it down into simpler steps. &lt;del&gt;I ended up using Automator on the Mac (it&amp;#39;s a native/default app and totally underrated IMO) to do this for me. The directions for that are beautifully written up &lt;a href=&quot;http://vincentp.me/blog/a-smarter-jekyll-workflow/&quot;&gt;in this blog post&lt;/a&gt;.&lt;/del&gt; &lt;em&gt;Edit: Automator let me down in the end. &lt;img class=&#39;emoji&#39; title=&#39;cry&#39; alt=&#39;cry&#39; src=&#39;https://github.global.ssl.fastly.net/images/icons/emoji/cry.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; &gt;&lt;/em&gt; Here is my updated workflow:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# starting in your-sites-blog-name directory&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake publish
&lt;span class=&quot;c&quot;&gt;# choose the draft post you want to publish&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# that moves down to _posts&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# make final checks and if all good then...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;yeah your awesome message about your post&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo cp -r _site/* ../your-username.github.io/
&lt;span class=&quot;c&quot;&gt;# put in your password&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this overrides everything in the other directory&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../your-username.github.io
&lt;span class=&quot;c&quot;&gt;# confirm that the contents of _site were copied over&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# you may need to rm -rf Rakefile OR add a .gitignore file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and put Rakefile in it. Whatever you&amp;#39;d like to do&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm -rf Rakefile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;your msg about your post that&amp;#39;s ready for Github&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;BOOM. You should be good to go now. Check out your site at &lt;a href=&quot;http://your-username.github.io&quot;&gt;http://your-username.github.io&lt;/a&gt; :)&lt;/p&gt;

&lt;h3 id=&quot;gt-laziness&quot;&gt;&amp;gt; Laziness&lt;/h3&gt;

&lt;p&gt;I like to make my workflow a lot easier by making aliases. The order of some of the commands won&amp;#39;t matter. So here&amp;#39;s the alias I created, using &lt;code&gt;sudo cp&lt;/code&gt; to overwrite things properly. It involves putting in my password but that&amp;#39;s still less typing overall. Easy peasy. This alias will be put into your &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; or &lt;code&gt;~/.bashrc&lt;/code&gt; file.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;copy-it&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll build;sudo cp -r _site/* ../your-username.github.io/;cd ../your-username.github.io;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;=======================&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Jekyll cheats&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;=======================&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;make sure you are in correct directory before running this&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;copy-it = jekyll build then copy contents of _site to your-username master&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously change the directory names to fit your thing. Save it and source your file: &lt;code&gt;source ~/.bash_profile&lt;/code&gt; or &lt;code&gt;source ~/.zshrc&lt;/code&gt; or &lt;code&gt;source ~/.bashrc&lt;/code&gt;. You should see the commands displayed in your terminal.  Alternatively you can just restart terminal. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If you run &lt;code&gt;copy-it&lt;/code&gt; you &lt;em&gt;MUST&lt;/em&gt; be in the correct directory (your-sites-blog-name)!! Don&amp;#39;t forget to git add and commit prior to running &lt;code&gt;copy-it&lt;/code&gt;, too!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After running the command, you end up in your-username.github.io directory. Confirm your changes with a &lt;code&gt;git diff&lt;/code&gt;. Then commit and push that sucker up! You are on your way to blogging freedom now. (And so am I!)&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +5&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Mar 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/jekyll-the-blog-maker/</link>
        <guid isPermaLink="true">http://risaonrails.com/jekyll-the-blog-maker/</guid>
        
        <category>jekyll</category>
        
        <category>guide</category>
        
        
        <category>jekyll</category>
        
        <category>guide</category>
        
      </item>
    
      <item>
        <title>Sandboxing Rails</title>
        <description>&lt;p&gt;Hey, did you know that there&amp;#39;s an option called &lt;code&gt;--sandbox&lt;/code&gt; that you can append to console? &lt;/p&gt;

&lt;p&gt;Yuuuup, you can run &lt;code&gt;rails console --sandbox&lt;/code&gt; when you load up your console. What&amp;#39;s it for? Simple -- to ensure that any changes you make to the database are &lt;em&gt;rolled back&lt;/em&gt; on exit.&lt;/p&gt;

&lt;h3 id=&quot;why-use-this&quot;&gt;Why use this?&lt;/h3&gt;

&lt;p&gt;Well, what if you&amp;#39;re going into your production box and need to poke around with the data. The site&amp;#39;s live, y&amp;#39;know. It&amp;#39;s great to be able to go into a production box, run &lt;code&gt;rails c&lt;/code&gt; and not have to worry that you may have accidentally deleted an entry or updated a value. Think of it as an extra safety net. Here&amp;#39;s what it&amp;#39;d look like.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails c --sandbox&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once in, you can do the usual CRUD actions, even run &lt;code&gt;.save!&lt;/code&gt;, and not have to worry about how the actual production database is affected. Here&amp;#39;s proof.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;❯❯❯&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;production&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Loading&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;production&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifications&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rolled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil, password_digest: nil, remember_token: nil, admin: false&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;003&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;risa&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;risa&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;004&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test@example.com&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;006&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password_confirmation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;007&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;User id: nil, name: &amp;quot;risa&amp;quot;, email: &amp;quot;test@example.com&amp;quot;, created_at: nil, updated_at: nil, password_digest:    &amp;quot;$2a$10$qmgIZE5IqicXfOc6WxOb4.s7rVm4uLAciYJnAnvukJuu...&amp;quot;, remember_token: nil, admin: false&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;User id: 1, name: &amp;quot;risa&amp;quot;, email: &amp;quot;test@example.com&amp;quot;, created_at: &amp;quot;2015-03-24 17:53:17&amp;quot;, updated_at: &amp;quot;2015-03-24 17:53:17&amp;quot;,     password_digest: &amp;quot;$2a$10$qmgIZE5IqicXfOc6WxOb4.s7rVm4uLAciYJnAnvukJuu...&amp;quot;, remember_token:    &amp;quot;eb878de3cfc54eda3df1ea974ac6a49a35a52f47&amp;quot;, admin: false&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;❯❯❯&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;production&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Loading&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;production&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifications&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rolled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;BOOM. Sweet sweet success. No prod box will scare you from now on.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +1&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/sandboxing-rails/</link>
        <guid isPermaLink="true">http://risaonrails.com/sandboxing-rails/</guid>
        
        <category>rails</category>
        
        <category>sandbox</category>
        
        <category>console</category>
        
        <category>tips</category>
        
        
        <category>rails</category>
        
        <category>console</category>
        
        <category>tips</category>
        
      </item>
    
  </channel>
</rss>
