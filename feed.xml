<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Risa writes about Rails, Postgres, DevOps, and other things. She loves pairing, internet memes, cats, and all the cute things.
</description>
    <link>http://risaonrails.com/</link>
    <atom:link href="http://risaonrails.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 16 Apr 2015 00:12:26 -0700</pubDate>
    <lastBuildDate>Thu, 16 Apr 2015 00:12:26 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Monitoring Nginx&#39;s Passenger</title>
        <description>&lt;p&gt;In the ever learning world I&amp;#39;m in, someone had commented on &lt;a href=&quot;/integrate-monit-with-slack/&quot;&gt;my post&lt;/a&gt; about monitoring Passenger.&lt;/p&gt;

&lt;p&gt;That got me thinking and diving deep into the depths of Google to find a solution that was acceptable for those of using Nging to create the Passenger instances.&lt;/p&gt;

&lt;p&gt;The most common search result for this was to use the gem &lt;a href=&quot;https://github.com/romanbsd/passenger_monit&quot;&gt;passenger-monit&lt;/a&gt;. However it hasn&amp;#39;t been updated in at least 2 years. I am not that ambitious enough to revive this gem for my own purposes. The biggest drawback for using this gem is that the rack PIDs are hardcoded and if the first one dies, Monit will complain. It isn&amp;#39;t ideal for my purposes since I run multiple apps on one server and I&amp;#39;d like to keep track of them individually.&lt;/p&gt;

&lt;p&gt;HOWEVER~! I have found a way that seems to work.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;

&lt;p&gt;There&amp;#39;s a method called &lt;code&gt;matching&lt;/code&gt; that monit allows. Essentially monit does a &lt;code&gt;ps aux | grep &amp;#39;whatever thing&amp;#39;&lt;/code&gt; to check for a process. &lt;a href=&quot;http://serverfault.com/questions/523226/monit-daemonize-non-daemon-process&quot;&gt;Holy balls, I love you person on ServerFault who answered this&lt;/a&gt; and I wish I had the reputation to upvote the crap out of that answer. But instead, mad props to you. &lt;/p&gt;

&lt;p&gt;Anyway, after reading that, everything became clear.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what I ended up doing. &lt;/p&gt;

&lt;h4 id=&quot;the-example-setup&quot;&gt;The example setup&lt;/h4&gt;

&lt;p&gt;Assume the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nginx + passenger (Passenger is spawned via Nginx)

&lt;ul&gt;
&lt;li&gt;there is no passenger PID file that exists&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rails app named &amp;#39;Surprise&amp;#39; 

&lt;ul&gt;
&lt;li&gt;nginx configured to point to &lt;code&gt;/home/rails/Surprise/public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Deployer user named &amp;#39;rails&amp;#39;&lt;/li&gt;
&lt;li&gt;Monit version 5.6 or 5.8 is running&lt;/li&gt;
&lt;li&gt;Digital Ocean droplet for server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, if you have not hit Surprise at all, you won&amp;#39;t have any passenger instances created. That makes sense. Why spawn a process when it isn&amp;#39;t being used? &lt;/p&gt;

&lt;p&gt;The process is brutally simple, hit the app to spawn a Passenger process, then check &lt;code&gt;top&lt;/code&gt; to see what the name is and create the monit file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;top -c
&lt;span class=&quot;c&quot;&gt;# hit shift M to sort by memory&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# you should see near the top right&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Passenger RubyApp: /home/rails/surprise/public &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# copy paste that&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo nano /etc/monit/conf.d/surprise-pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now in this file, write in the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;check process surprise-pass matching &lt;span class=&quot;s1&quot;&gt;&amp;#39;Passenger RubyApp: \/home\/rails\/surprise\/public&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; totalmem &amp;gt; 35% &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/slack.rb
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; totalmem &amp;gt; 60% &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/touch_surprise_sh  &lt;span class=&quot;c&quot;&gt;# restart app&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; changed pid &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/slack.rb              &lt;span class=&quot;c&quot;&gt;# sanity check&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; totalcpu &amp;gt; 25% &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/slack.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and exit. Notice the &lt;code&gt;\&lt;/code&gt; marks to escape the &lt;code&gt;/&lt;/code&gt; marks. Because monit does essentially a &lt;code&gt;ps aux | grep ____&lt;/code&gt;, copy pasting what you find in &lt;code&gt;top -c&lt;/code&gt; is a great way to get the process match.&lt;/p&gt;

&lt;p&gt;A couple of things to note. 1) There is also a new file being executed here. More on this in a bit. 2) We are talking totalmem and totalcpu. Passenger can spin up child processes if it needs it, but I want to look at the total memory consumption of that particular app. Total cpu is not per core but for the whole thing. I also based these off of monit&amp;#39;s web interface information. It&amp;#39;s very handy to pick out the things you want to monitor in particular.&lt;/p&gt;

&lt;p&gt;The new file &lt;code&gt;touch_surprise_sh&lt;/code&gt; is a super simple bash script that restarts Passenger (and not Nginx) via the &lt;code&gt;touch&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo nano /etc/monit/touch_surprise_sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the file type the following lines:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/bash

touch /home/rails/surprise/tmp/restart.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively you can make it more verbose and sudo in as your user (rails) to restart Passenger.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo -u rails -H sh -c &amp;quot;touch /home/rails/surprise/tmp/restart.txt‚Äù
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and exit. Make it into an executable file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo chmod +x /etc/monit/touch_surprise_sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do your standard monit sanity check, then reload monit.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo monit -t       &lt;span class=&quot;c&quot;&gt;# fix any problems, obv&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo monit reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Confirm on your web interface that surprise-pass is loaded up and displaying all the goodies you like to see. When you restart nginx, Passenger should lose a PID. It&amp;#39;ll alert you on Slack when you hit the app and create a new PID. Right on. &lt;img class=&#39;emoji&#39; title=&#39;fist&#39; alt=&#39;fist&#39; src=&#39;https://github.global.ssl.fastly.net/images/icons/emoji/fist.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; &gt;&lt;/p&gt;

&lt;p&gt;Congrats! Create a monit conf file for each of your apps and behold your power!&lt;/p&gt;

&lt;p&gt;Special thanks to Grant Trevor who got me to delve into the depths of monit and Google &lt;img class=&#39;emoji&#39; title=&#39;grinning&#39; alt=&#39;grinning&#39; src=&#39;https://github.global.ssl.fastly.net/images/icons/emoji/grinning.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; &gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +5&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Apr 2015 14:21:01 -0700</pubDate>
        <link>http://risaonrails.com/monitoring-nginx-and-passenger/</link>
        <guid isPermaLink="true">http://risaonrails.com/monitoring-nginx-and-passenger/</guid>
        
        <category>monit</category>
        
        <category>passenger</category>
        
        
        <category>guide</category>
        
        <category>devops</category>
        
        <category>monit</category>
        
        <category>passenger</category>
        
      </item>
    
      <item>
        <title>Woohoo, Nginx training!</title>
        <description>&lt;p&gt;I freaking love San Francisco. Seriously. It&amp;#39;s pretty much the center of everything tech related. And if it&amp;#39;s not in the city, then it&amp;#39;s in Silicon Valley, just a short trip away (depending on what time you leave).&lt;/p&gt;

&lt;p&gt;I also secretly love Twitter. Why? Because every single conference, meetup, or event I&amp;#39;ve wanted to attend has either been retweeted into my feed or has popped up as a suggested tweet / ad. Yeah, Twitter&amp;#39;s algorithm is brilliant. Gotta hand it to them. &lt;/p&gt;

&lt;p&gt;So what&amp;#39;s any of this got to do with Nginx? Well the other day I tweeted about something I learned with Nginx and their location blocks. Not long after, when I was checking my feed, I saw a suggested ad/tweet thingy that said something about an Nginx User Summit and Training thing happening relatively soon and in SF. I clicked on it. Hold the phone. There&amp;#39;s going to be a fundamentals of training course?! This is perfect! My coworker and I have been flailing our arms trying to learn and properly use Nginx for about a couple of weeks, and here there was a 1-day training being offered!&lt;/p&gt;

&lt;p&gt;We spoke to the boss lady who immediately said yes and bought our tickets for us (early bird tix were about $145 incl silly service fees and taxes). We were off to training! Truth is, even if she didn&amp;#39;t pay for it, I would have footed the bill because I saw that training to be crucial to my own success. Thankfully our boss is super awesome and encourages learning.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://swagct.com/generators/images/successkid_thumb.jpg&quot; alt=&quot;Success kid&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;training-day&quot;&gt;Training Day&lt;/h3&gt;

&lt;p&gt;The Summit/Training was held at RocketSpace in downtown SF. The space was really nice, and we were given a bunch of different swag (tees, water bottles, cute lil cars with M&amp;amp;Ms in them, an O&amp;#39;Reilly book about microservices, etc). The best part was the fact that the tables were lined with paper and had crayons. :D Oh yeah the 12-yr-old me was stoked!&lt;/p&gt;

&lt;p&gt;Training started promptly at 9:30 and went over the basics of how to install and configure Nginx. We were all given AWS EC2 or Digital Ocean droplets to work with. My coworker and I lucked out with DO boxes (who needs some long URL to type in for ssh&amp;#39;ing? Just give me a freaking IP!)&lt;/p&gt;

&lt;p&gt;The pace was pretty good (admittedly a bit slow for my tastes) and was very comprehensive. It went over what each of the major blocks/contents and common directives were, how to set up SSL, how to set up multiple apps, load balancing, and how to act like a proxy server. All the things I needed to really learn were covered. Between each section was a 5-10min break for people to attempt the &amp;#39;exercise&amp;#39;, which was stepped thru by the instructor prior, so it wasn&amp;#39;t anything extremely complicated.&lt;/p&gt;

&lt;p&gt;I only really recall 2-3 Nginx folks walking around to check to see if anyone needed extra assistance, tho there were about 10-12 Nginx folks overall. The guys sitting across from us needed some assistance because their boxes didn&amp;#39;t have port 8080 open (or listening, rather), which couldn&amp;#39;t be resolved for whatever reason, even with a couple of Nginx folks helping out. &lt;/p&gt;

&lt;p&gt;The final exercise was more complicated and right up my alley - a task to set up Nginx as backend and proxy servers, incorporating things we&amp;#39;ve already learned as well as proxy caching. The answers are apparently going to be emailed to us later so I&amp;#39;ll check against that once we receive it.&lt;/p&gt;

&lt;p&gt;Once training was over, the lightning talks began. Admittedly, this was where my interest wained, tho the guy talking about load testing with a thing called Bees with Machine Guns was really cool. My coworker and I opted not to stay until the end for the social hour and excused ourselves. &lt;/p&gt;

&lt;h3 id=&quot;overall-thoughts&quot;&gt;Overall thoughts&lt;/h3&gt;

&lt;p&gt;Seriously, this training was kind of amazingly perfect timing for my coworker and myself. Would I recommend it? Hellz yes! It&amp;#39;s the perfect beginner course to anyone getting to know and understand Nginx. It&amp;#39;s really simple to use, now that I understand it better. It was also validating to know that the things we were teaching ourselves by fiddling around with the servers were all correct.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m always game on attending training of any sort. Really glad I was able to go to this particular one. I hope to attend more and different training courses.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +1. Attending the training and learning something is +10 life exp!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Apr 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/woohoo-nginx-training/</link>
        <guid isPermaLink="true">http://risaonrails.com/woohoo-nginx-training/</guid>
        
        <category>devops</category>
        
        <category>nginx</category>
        
        <category>training</category>
        
        
        <category>nginx</category>
        
        <category>rails</category>
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Creating new old-version Rails apps</title>
        <description>&lt;p&gt;As always, a work story. Here at Team DevOps, we&amp;#39;ve been tasked to create a couple of Rails apps using different Ruby versions. After all, why not? We&amp;#39;re also Rails developers too, even if we don&amp;#39;t look like it. Admittedly, it&amp;#39;s been so long since I&amp;#39;ve started a Rails app from scratch I almost forgot how to do &lt;code&gt;rails new&lt;/code&gt;... Yeah, only slightly embarrassed.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m more familiar with Ruby 2.0.0 and Rails 4.0.x than 2.2.x and 4.2.x, so I decided to make my app using the older versions. Of course, I&amp;#39;ve since updated my rubies and rails versions, so without thinking much about it, I did &lt;code&gt;rails new&lt;/code&gt;. Figured I could just bundle update when I switched ruby/rails versions.&lt;/p&gt;

&lt;p&gt;Oh god, that was a terrible, TERRIBLE mistake.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.nicknotas.com/wp-content/uploads/2013/04/Ive_Made_a_Huge_Mistake.jpg&quot; alt=&quot;Huge mistake&quot;&gt;&lt;/p&gt;

&lt;p&gt;What got created was an awesomely standard Rails 4.2.0 app with Ruby 2.2.0. No problem. In my Gemfile I added in &lt;code&gt;ruby 2.0.0&lt;/code&gt; and bundle updated and thought nothing of it. I moved on and edited my database.yml file and decided to add some of my standard gems I&amp;#39;d be using for TDD: guard and spork. But since it was rails 4.2, I wasn&amp;#39;t sure how my guard/spork setup would work, since I was plugging and chugging from an old 4.0.x app I had. Well, whatever.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll just change rails 4.2.x to rails 4.0.x! No problemo!! Lemme bundle update and then run &lt;code&gt;guard init rspec&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://stream1.gifsoup.com/view/897102/mushroom-cloud-o.gif&quot; alt=&quot;Kaboom!&quot;&gt;&lt;/p&gt;

&lt;p&gt;What. Have. I. Done. Guard was complaining that I had started things up with a newer version so it wouldn&amp;#39;t be able to use the version 4.0.13 wanted (2.6). Not only that but &lt;code&gt;rails g anything&lt;/code&gt; wasn&amp;#39;t working either. Geezus. So I completely uninstalled guard and then installed only the correct version, but even then the Guardfile created seemed weird. Rails didn&amp;#39;t let me install rspec either without complaining. Not to mention Rake. Oy vey. How much had changed between Rails 4.0 and 4.2??! What is this business about &lt;code&gt;activejob_railties&lt;/code&gt;??&lt;/p&gt;

&lt;p&gt;OK, there were some major changes that I haven&amp;#39;t really been paying attention to. ActiveJob was a new addition to 4.2. On top of that, the &lt;code&gt;config/initializers/application.rb&lt;/code&gt; file format had changed from referencing the &lt;code&gt;AppName::Application...&lt;/code&gt; to &lt;code&gt;Rails.application...&lt;/code&gt; Then there were the additional railties that were added in. This is just the tip of the iceberg...&lt;/p&gt;

&lt;p&gt;Yeah let&amp;#39;s queue up the whole &lt;code&gt;I don&amp;#39;t know what I&amp;#39;m doing&lt;/code&gt; meme here. Seriously. At this point the only thing I could sensibly do was to completely start over and create a Rails 4.0.x app. But how would I do that?? &lt;/p&gt;

&lt;p&gt;The Rails guides didn&amp;#39;t have any indication on how to reference versions when creating it, so off to Google and StackOverflow.&lt;/p&gt;

&lt;h3 id=&quot;the-way-of-the-old-rails-warrior&quot;&gt;The way of the old rails warrior&lt;/h3&gt;

&lt;p&gt;I can just refer an older Rails version when doing &lt;code&gt;rails new&lt;/code&gt;! Since I wanted 4.0.13, I did this: &lt;code&gt;rails 4.0.13 new appname&lt;/code&gt;. This did not work.&lt;/p&gt;

&lt;p&gt;My syntax was incorrect, and maybe I need rails 4.0.13 installed. I also wanted to build the app with ruby 2.0.0 so in the end these were the correct steps. (I use rbenv on my machine, and apparently didn&amp;#39;t have gems for p643 so used p451.)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv global 2.0.0-p451
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install rails 4.0.13
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails _4.0.13_ new appname&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Please note the &lt;code&gt;_&lt;/code&gt; surrounding the version. This is key! Once I did that and installed the app, everything was set properly. I created a rails 4.0.x app that was locked in with ruby 2.0.0. FINALLY. Bundle installed, set up guard and spork and rspec and I was on my merry way to coding heaven. I commited that sucker faster than a speeding bullet.&lt;/p&gt;

&lt;p&gt;Now, how do I write new models again...?&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +1 for super obscure learnings.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Apr 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/creating-new-old-version-rails-apps/</link>
        <guid isPermaLink="true">http://risaonrails.com/creating-new-old-version-rails-apps/</guid>
        
        <category>rails</category>
        
        <category>tip</category>
        
        
        <category>rails</category>
        
        <category>development</category>
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>Jekyll: The blog maker</title>
        <description>&lt;p&gt;As you may have figured out, I use Jekyll to create my Github Pages. And boy did I have a hard time understanding what the heck was going on. I dunno, maybe docs and I just don&amp;#39;t get along. Most of the how-to guides out there were like &amp;quot;oh yeah rip off this template from this site and start using jekyll!&amp;quot; but that feels like a cop-out to me, and I like to bash my head into the wall. Or keyboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.kym-cdn.com/photos/images/masonry/000/021/531/SmashingHeadOnKeyboard.gif&quot; alt=&quot;Bash your head in&quot;&gt;&lt;/p&gt;

&lt;p&gt;Pretty. Much. Every. Day.&lt;/p&gt;

&lt;p&gt;Anyway, here&amp;#39;s what I&amp;#39;ve learned thus far with using Jekyll and Github Pages. Maybe this will help you out, too. I hope to expand my knowledge as well.  Glad that it&amp;#39;s written in Ruby, so implementation of things are much easier to understand (for me).&lt;/p&gt;

&lt;h3 id=&quot;&amp;gt;-github-pages-overview&quot;&gt;&amp;gt; Github Pages Overview&lt;/h3&gt;

&lt;p&gt;First issue I did not realize, and maybe I should have actually &lt;em&gt;read&lt;/em&gt; the instructions better,... there is a HUGE difference between creating a Github Page for a repo and for your account. I wanted to create one for my account but made it for my repo instead. Whoops.&lt;/p&gt;

&lt;p&gt;Github &lt;a href=&quot;https://pages.github.com/&quot;&gt;explains this fairly well&lt;/a&gt;, but here&amp;#39;s my version for one-stop shopping goodness. I assume you&amp;#39;re a developer and are knowledgable about the standard &lt;code&gt;git&lt;/code&gt; type of commands.&lt;/p&gt;

&lt;p&gt;On your local machine, install Jekyll.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install jekyll&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;&amp;gt;-github-pages-for-your-github-account&quot;&gt;&amp;gt; Github Pages for your github account&lt;/h3&gt;

&lt;p&gt;Create a new repo in Github called &amp;quot;your-github-username.github.io&amp;quot;. In my case it&amp;#39;s a repo called &amp;quot;rbatta.github.io&amp;quot; since my Github username is rbatta. When you git clone to your local machine, your &lt;code&gt;master&lt;/code&gt; branch will be the one Github uses to publish your site. You get that? &lt;em&gt;Master branch is what Github uses to publish your site.&lt;/em&gt; Git clone your new repo and hop into that directory.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If you create a repo and name it whatever you want and NOT &amp;quot;your-username.github.io&amp;quot;, Github will see this as a Page for your Repo. When this happens, Github will use the branch called &lt;code&gt;gh-pages&lt;/code&gt; instead of &lt;code&gt;master&lt;/code&gt; to auto-publish your site. It&amp;#39;s confusing and tripped me up massively in the beginning.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com/your-github-username/your-github-username.github.io.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For sanity&amp;#39;s sake, before you hop into your directory, create a new directory and call it whatever you want. If it makes it easier for you, call it what you want your site to be called. Is it your blog? Call it that. Since I booched the whole Github Pages account vs repo thing, I already had a repo called &lt;code&gt;risa-on-rails&lt;/code&gt; so I used this. This new directory thing will come in handy later. Trust me.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir your-sites-blog-name
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;your-sites-blog-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great! Now I realize this is an empty directory. It&amp;#39;s cool. Time to create a new Jekyll blog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But wait!&lt;/strong&gt; Why are we in &lt;code&gt;your-sites-blog-name&lt;/code&gt; and not in &lt;code&gt;your-username.github.io&lt;/code&gt; directory? Well, like I said before, the &lt;code&gt;master&lt;/code&gt; branch is what Github uses to publish your blog. &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; publish your repo. We&amp;#39;ll keep the &lt;code&gt;master&lt;/code&gt; directory clean until we&amp;#39;re ready to push things up. So in the meantime, we&amp;#39;ll use the &lt;code&gt;your-sites-blog-name&lt;/code&gt; directory to do all of our work.&lt;/p&gt;

&lt;h3 id=&quot;&amp;gt;-jekyll-setup&quot;&gt;&amp;gt; Jekyll setup&lt;/h3&gt;

&lt;p&gt;Create a new Jekyll site by running &lt;code&gt;jekyll new .&lt;/code&gt; Make sure you&amp;#39;ve got that period in there, since that creates it within this directory.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll new .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Jekyll will install a bunch of directories with &lt;em&gt;&amp;#39;s in them along with some other files, including a `&lt;/em&gt;config.yml` file. This file will be the driver of just about everything: name it here and use it everywhere!&lt;/p&gt;

&lt;p&gt;Create 2 directories called &lt;code&gt;_plugins&lt;/code&gt; and &lt;code&gt;_drafts&lt;/code&gt;. Because you may want/need them.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir _plugins _drafts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is probably a good time to do &lt;code&gt;git init&lt;/code&gt; and do your initial commit.&lt;/p&gt;

&lt;h3 id=&quot;&amp;gt;-_config.yml&quot;&gt;&amp;gt; _config.yml&lt;/h3&gt;

&lt;p&gt;Fill in the information given. For &lt;code&gt;baseurl:&lt;/code&gt; keep that as blank quotes so that when you serve up your site, it&amp;#39;ll load at &lt;code&gt;127.0.0.1:4000&lt;/code&gt; instead of &lt;code&gt;127.0.0.1:4000/baseurl-you-gave-it&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you change any of the variables, make sure you change them in the css and anywhere else in the other files. For me, I changed the &lt;code&gt;:title&lt;/code&gt; symbol to &lt;code&gt;:name&lt;/code&gt; for the name of my blog. Anywhere where &lt;code&gt;site.title&lt;/code&gt; was referenced, I changed to &lt;code&gt;site.name&lt;/code&gt;. That includes the css file too. I did this because I added in a &lt;code&gt;permalink: /:title/&lt;/code&gt; option to give all my pages their own permalinks instead of the weird directory structure Jekyll uses.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/:title/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;&amp;gt;-_posts/-and-_drafts/&quot;&gt;&amp;gt; _posts/ and _drafts/&lt;/h3&gt;

&lt;p&gt;By default, anything that you put in the _posts directory will be published. Of course you need to make sure it&amp;#39;s in the format of &lt;code&gt;yyyy-mm-dd-post-name&lt;/code&gt; with whatever extension you use. I prefer markdown so all my posts end with &lt;code&gt;.md&lt;/code&gt;. You&amp;#39;re the author of your blogposts so choose whatever format you&amp;#39;d like: Textile or Markdown are the two default choices Jekyll supports. You can choose others with plugins.&lt;/p&gt;

&lt;p&gt;The _drafts folder is exactly that, for drafts. You don&amp;#39;t need to append dates to it. In fact, when you&amp;#39;re ready to publish it, that&amp;#39;s when you can append dates. For that, we&amp;#39;ve got a handy tool, the &lt;a href=&quot;https://github.com/gummesson/jekyll-rake-boilerplate&quot;&gt;jekyll-rake-boilerplate Rakefile&lt;/a&gt;. Copy that Rakefile into your repo. Now you&amp;#39;ve got some added jekyll capabilities like: &lt;code&gt;rake watch[&amp;quot;drafts&amp;quot;]&lt;/code&gt; which is the equivalent to &lt;code&gt;jekyll serve --watch --drafts&lt;/code&gt;, and &lt;code&gt;rake draft[&amp;quot;your post&amp;#39;s title&amp;quot;]&lt;/code&gt; which creates a new draft post with the given title. Sweetness. &lt;code&gt;rake publish&lt;/code&gt; let&amp;#39;s you pick the draft you want to publish and appends the date automagically to your post, moving it from _drafts to _posts and eliminating the need to wonder what day it currently is.&lt;/p&gt;

&lt;p&gt;To use the &lt;code&gt;rake draft[&amp;quot;title&amp;quot;]&lt;/code&gt; task, create a file called &lt;code&gt;_post.md&lt;/code&gt; in the root directory. In your &lt;code&gt;_config.yml&lt;/code&gt; add in the following so your rake task won&amp;#39;t break when it&amp;#39;s run:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;post:
  template: _post.md
  extension: md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In your &lt;code&gt;_post.md&lt;/code&gt; file, you need to ensure that you&amp;#39;ve got the YAML markup at the beginning with the --- thing. If you need a template, copy paste it from the Rakefile site or use the welcome-to-jekyll post&amp;#39;s YAML header. Think of this as your template for ALL your posts. Update as you see fit.&lt;/p&gt;

&lt;h3 id=&quot;&amp;gt;-_plugins&quot;&gt;&amp;gt; _plugins&lt;/h3&gt;

&lt;p&gt;There are some cool plugins for added functionality for Jekyll. However when publishing to Github, that&amp;#39;s stripped away and is not built when the site is published. Something something safety precautions. Ehhh. This is why we created a separate directory to work in. The &lt;code&gt;your-sites-blog-name&lt;/code&gt; directory has all your drafts and posts and plugins and directories, but we will be creating the &amp;#39;static&amp;#39; website and pushing that to the &lt;code&gt;your-username.github.io&lt;/code&gt; directory for the master branch, to deploy to Github to publish. Wow, that came off a bit more complicated than I expected. Here&amp;#39;s the workflow.  We&amp;#39;ll go more into detail later on with this.&lt;/p&gt;

&lt;p&gt;Start in your-sites-blog-name dir &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; create draft posts and stuff &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; rake publish draft &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; jekyll build site &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; copy &lt;em&gt;ONLY&lt;/em&gt; the &lt;code&gt;_site&lt;/code&gt; directory contents to your-username.github.io directory &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; cleanup anything you need and git add, commit &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; push to github &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; ??? &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; profit!&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s start by adding in my favourite simple plugin, the &lt;a href=&quot;https://gist.github.com/23maverick23/8532525&quot;&gt;jekyll-font-awesome&lt;/a&gt; plugin. Create a file in &lt;code&gt;_plugins/&lt;/code&gt; called &lt;code&gt;font_awesome.rb&lt;/code&gt; and paste the contents from that gist into this file. If you&amp;#39;re not familiar with fontawesome.io, it&amp;#39;s a bunch of rad icons for everything. Paste the link below into your head.html file at around line 6: &lt;code&gt;_includes/head.html&lt;/code&gt;, just like that.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can add icons by using the syntax &lt;code&gt;{.% icon fa-something %}&lt;/code&gt; (without the period in there). Go buck-wild and add some icons and stuff to your site! Wahoo!&lt;/p&gt;

&lt;h3 id=&quot;&amp;gt;-publishing&quot;&gt;&amp;gt; Publishing&lt;/h3&gt;

&lt;p&gt;When you are ready to publish, build the site with Jekyll by running &lt;code&gt;jekyll build&lt;/code&gt;.  This creates a directory called &lt;code&gt;_site/&lt;/code&gt; which houses the raw ol&amp;#39; school HTML of your posts with a css directory that the pages reference.&lt;/p&gt;

&lt;p&gt;OK. Remember the workflow up above? Let&amp;#39;s break it down into simpler steps. &lt;del&gt;I ended up using Automator on the Mac (it&amp;#39;s a native/default app and totally underrated IMO) to do this for me. The directions for that are beautifully written up &lt;a href=&quot;http://vincentp.me/blog/a-smarter-jekyll-workflow/&quot;&gt;in this blog post&lt;/a&gt;.&lt;/del&gt; &lt;em&gt;Edit: Automator let me down in the end. &lt;img class=&#39;emoji&#39; title=&#39;cry&#39; alt=&#39;cry&#39; src=&#39;https://github.global.ssl.fastly.net/images/icons/emoji/cry.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; &gt;&lt;/em&gt; Here is my updated workflow:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# starting in your-sites-blog-name directory&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake publish
&lt;span class=&quot;c&quot;&gt;# choose the draft post you want to publish&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# that moves down to _posts&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# make final checks and if all good then...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;yeah your awesome message about your post&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo cp -r _site/* ../your-username.github.io/
&lt;span class=&quot;c&quot;&gt;# put in your password&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this overrides everything in the other directory&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../your-username.github.io
&lt;span class=&quot;c&quot;&gt;# confirm that the contents of _site were copied over&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# you may need to rm -rf Rakefile OR add a .gitignore file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and put Rakefile in it. Whatever you&amp;#39;d like to do&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm -rf Rakefile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;your msg about your post that&amp;#39;s ready for Github&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;BOOM. You should be good to go now. Check out your site at &lt;a href=&quot;http://your-username.github.io&quot;&gt;http://your-username.github.io&lt;/a&gt; :)&lt;/p&gt;

&lt;h3 id=&quot;&amp;gt;-laziness&quot;&gt;&amp;gt; Laziness&lt;/h3&gt;

&lt;p&gt;I like to make my workflow a lot easier by making aliases. The order of some of the commands won&amp;#39;t matter. So here&amp;#39;s the alias I created, using &lt;code&gt;sudo cp&lt;/code&gt; to overwrite things properly. It involves putting in my password but that&amp;#39;s still less typing overall. Easy peasy. This alias will be put into your &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; or &lt;code&gt;~/.bashrc&lt;/code&gt; file.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;copy-it&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll build;sudo cp -r _site/* ../your-username.github.io/;cd ../your-username.github.io;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;=======================&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Jekyll cheats&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;=======================&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;make sure you are in correct directory before running this&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;copy-it = jekyll build then copy contents of _site to your-username master&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously change the directory names to fit your thing. Save it and source your file: &lt;code&gt;source ~/.bash_profile&lt;/code&gt; or &lt;code&gt;source ~/.zshrc&lt;/code&gt; or &lt;code&gt;source ~/.bashrc&lt;/code&gt;. You should see the commands displayed in your terminal.  Alternatively you can just restart terminal. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If you run &lt;code&gt;copy-it&lt;/code&gt; you &lt;em&gt;MUST&lt;/em&gt; be in the correct directory (your-sites-blog-name)!! Don&amp;#39;t forget to git add and commit prior to running &lt;code&gt;copy-it&lt;/code&gt;, too!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After running the command, you end up in your-username.github.io directory. Confirm your changes with a &lt;code&gt;git diff&lt;/code&gt;. Then commit and push that sucker up! You are on your way to blogging freedom now. (And so am I!)&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +5&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Mar 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/jekyll-the-blog-maker/</link>
        <guid isPermaLink="true">http://risaonrails.com/jekyll-the-blog-maker/</guid>
        
        <category>jekyll</category>
        
        <category>guide</category>
        
        
        <category>jekyll</category>
        
        <category>guide</category>
        
      </item>
    
      <item>
        <title>Sandboxing Rails</title>
        <description>&lt;p&gt;Hey, did you know that there&amp;#39;s an option called &lt;code&gt;--sandbox&lt;/code&gt; that you can append to console? &lt;/p&gt;

&lt;p&gt;Yuuuup, you can run &lt;code&gt;rails console --sandbox&lt;/code&gt; when you load up your console. What&amp;#39;s it for? Simple -- to ensure that any changes you make to the database are &lt;em&gt;rolled back&lt;/em&gt; on exit.&lt;/p&gt;

&lt;h3 id=&quot;why-use-this?&quot;&gt;Why use this?&lt;/h3&gt;

&lt;p&gt;Well, what if you&amp;#39;re going into your production box and need to poke around with the data. The site&amp;#39;s live, y&amp;#39;know. It&amp;#39;s great to be able to go into a production box, run &lt;code&gt;rails c&lt;/code&gt; and not have to worry that you may have accidentally deleted an entry or updated a value. Think of it as an extra safety net. Here&amp;#39;s what it&amp;#39;d look like.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails c --sandbox&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once in, you can do the usual CRUD actions, even run &lt;code&gt;.save!&lt;/code&gt;, and not have to worry about how the actual production database is affected. Here&amp;#39;s proof.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;‚ùØ‚ùØ‚ùØ&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;production&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Loading&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;production&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifications&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rolled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil, password_digest: nil, remember_token: nil, admin: false&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;003&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;risa&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;risa&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;004&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test@example.com&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;006&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password_confirmation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;007&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;User id: nil, name: &amp;quot;risa&amp;quot;, email: &amp;quot;test@example.com&amp;quot;, created_at: nil, updated_at: nil, password_digest:    &amp;quot;$2a$10$qmgIZE5IqicXfOc6WxOb4.s7rVm4uLAciYJnAnvukJuu...&amp;quot;, remember_token: nil, admin: false&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;User id: 1, name: &amp;quot;risa&amp;quot;, email: &amp;quot;test@example.com&amp;quot;, created_at: &amp;quot;2015-03-24 17:53:17&amp;quot;, updated_at: &amp;quot;2015-03-24 17:53:17&amp;quot;,     password_digest: &amp;quot;$2a$10$qmgIZE5IqicXfOc6WxOb4.s7rVm4uLAciYJnAnvukJuu...&amp;quot;, remember_token:    &amp;quot;eb878de3cfc54eda3df1ea974ac6a49a35a52f47&amp;quot;, admin: false&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;‚ùØ‚ùØ‚ùØ&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;production&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Loading&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;production&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sandbox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifications&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rolled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;BOOM. Sweet sweet success. No prod box will scare you from now on.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +1&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/sandboxing-rails/</link>
        <guid isPermaLink="true">http://risaonrails.com/sandboxing-rails/</guid>
        
        <category>rails</category>
        
        <category>sandbox</category>
        
        <category>console</category>
        
        <category>tips</category>
        
        
        <category>rails</category>
        
        <category>console</category>
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>A Rails Double App Setup on Digital Ocean</title>
        <description>&lt;p&gt;I recently started using Digital Ocean because of work. Dat doing the devops bidness. Right. If you&amp;#39;re unfamiliar with Digital Ocean, they are a virtual server provider that uses SSD hard drives and a really cheap pricing plan.  Since it&amp;#39;s bare bones, you&amp;#39;re responsible for everything, from security, to installation of whatever. That being said, they DO (haha) provide some templates to make things easier. One of them is their Rails 1-click template, which has Nginx, Unicorn, and MySQL already installed. Right on! &lt;/p&gt;

&lt;p&gt;Hey, if LAMP stack is Linux Apache MySQL PHP and LEMP is the same but Nginx, then is this setup called LEMUR? Linux Nginx MySQL Unicorn Rails. And if it&amp;#39;s Postgres, then it&amp;#39;d be LEPUR? Well, I&amp;#39;m calling them this from here on out!&lt;/p&gt;

&lt;p&gt;That being said, what happens when you actually want to put TWO apps on a DO rails-template box?  There&amp;#39;s a lot of weird sometimes-reverse engineering going on with that, but overall, it&amp;#39;s totally possible to do. There isn&amp;#39;t any documentation on this, so if you run into this scenario, hopefully this helps you. &lt;/p&gt;

&lt;p&gt;The method I&amp;#39;m presenting here is the way I had set this up and got working.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;FULL DISCLAIMER&lt;/em&gt;&lt;/strong&gt; It&amp;#39;s a bit ugly, because I&amp;#39;m still new to this, and at the time no one else had done this before. Since I started writing this post, I realized that our setup was just not sustainable and have moved to using straight-up Ubuntu 14.10 boxes. Also, Ubuntu 14.04 does not support Postgres 9.4. Ew. But that&amp;#39;s a topic for another day. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; I basically doubled all the unicorn conf files and doubled the server blocks in nginx.&lt;/p&gt;

&lt;h2 id=&quot;digital-ocean-1-click-rails-template&quot;&gt;Digital Ocean 1-Click Rails Template&lt;/h2&gt;

&lt;p&gt;Start with your standard Ubuntu setup and click the Rails template. Deploy. The DO template comes with a user already created called Rails. They have a great doc on &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-the-1-click-ruby-on-rails-on-ubuntu-14-04-image&quot;&gt;how to set your own Rails app with their template&lt;/a&gt;, but here&amp;#39;s my modifications.  Since our apps are on the LEPUR stack, there&amp;#39;s a bit of extra work.&lt;/p&gt;

&lt;h3 id=&quot;bash-setup&quot;&gt;Bash setup&lt;/h3&gt;

&lt;p&gt;First, start by installing git and Postgres. Skip the Postgres install if you&amp;#39;re sticking with LEMUR. I dropped the &lt;code&gt;sudo&lt;/code&gt; part since I&amp;#39;m logged in as &lt;code&gt;root&lt;/code&gt; user.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get install git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get postgresql postgresql-contrib&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Set up git with your name and username. Switch to Postgres user account and create your psql user named &lt;code&gt;rails&lt;/code&gt; to keep it consistent with the already-created rails user. Gosh that&amp;#39;s confusing.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.name &lt;span class=&quot;s2&quot;&gt;&amp;quot;YOURNAME&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.email &lt;span class=&quot;s2&quot;&gt;&amp;quot;YOUREMAIL&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;su - postgres
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;createuser --interactive -P rails&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Follow the on screen commands for giving your rails postgres-user a password (keep it secret, keep it safe). Don&amp;#39;t give it superuser status. Safety first, after all. Exit out of the postgres user account. Set up the rails bash environment (autoload bash shell upon user switch) and create a directory for sockets in /var.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chsh -s /bin/bash rails
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir /var/sockets&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;two-rails-apps-setup&quot;&gt;Two Rails apps setup&lt;/h3&gt;

&lt;p&gt;Now we add our 2 apps. For simplicity sake, I&amp;#39;m adding both of them into the /home/rails/ directory, once I empty it out. If you accidentally deleted the entire rails folder, just &lt;code&gt;mkdir rails&lt;/code&gt; in &lt;code&gt;/home&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm -r /home/rails/*
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/rails
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone REPO1_ADDRESS
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/rails/REPO1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm install RUBY1-VERSION-FOR-REPO1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm use RUBY1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --without development &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Repeat this for the 2nd app (skipping the 1st &lt;code&gt;rm -r&lt;/code&gt; step, of course). I assume you have two completely different Ruby versions, as was the case with me: 2.0 and 2.2. H&amp;#39;okayso. You may have noticed me running bundle as &lt;code&gt;root&lt;/code&gt;. Digital Ocean is a bit weird. They want you to use &lt;code&gt;root&lt;/code&gt; to bundle install. I know, I know. Whatever. We work with what we&amp;#39;ve got. Hopefully don&amp;#39;t run into any hitches. Instead of using the &lt;code&gt;--deployment&lt;/code&gt; option, I&amp;#39;m using &lt;code&gt;--without development test&lt;/code&gt; because I could. (I&amp;#39;ve had issues with the deployment option.)&lt;/p&gt;

&lt;p&gt;Ok this part was the easy part. Like setting up 2 dev environments on your own local machine. :)  Once bundle has been run, chown it to the rails user. The command below should get both repos at once.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chown rails:www-data -R /home/rails&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;unicorn&quot;&gt;Unicorn&lt;/h3&gt;

&lt;p&gt;I struggled and searched the internet far and wide for someone who took the DO 1-click template to create 2 apps. Their template has a non-standard unicorn and nginx configuration (in terms of files and locations). Again, we work with what we got. The easiest way I found was to duplicate the unicorn files, which are located in two different places: &lt;code&gt;/etc/default/unicorn&lt;/code&gt; and &lt;code&gt;/home/unicorn/unicorn.conf&lt;/code&gt;. We&amp;#39;ll start with the latter. Out of sheer simplicity, the dupes had 2 appended to the end of it. I also use nano as my editor, so don&amp;#39;t judge. :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Optional step: If you&amp;#39;re paranoid like me, you can git init &lt;code&gt;/home/unicorn/&lt;/code&gt; directory so you can keep track of changes.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cp /home/unicorn/unicorn.conf /home/unicorn/unicorn2.conf

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano /home/unicorn/unicorn.conf

&lt;span class=&quot;c&quot;&gt;# Edit repo 1&amp;#39;s unicorn.conf to look like this:&lt;/span&gt;
listen &lt;span class=&quot;s2&quot;&gt;&amp;quot;/var/sockets/unicorn.REPO1.sock&amp;quot;&lt;/span&gt;, :backlog &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; 256
worker_processes 4
user &lt;span class=&quot;s2&quot;&gt;&amp;quot;rails&amp;quot;&lt;/span&gt;
working_directory &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/rails/REPO1&amp;quot;&lt;/span&gt;
pid &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/unicorn/pids/REPO1.pid&amp;quot;&lt;/span&gt;
stderr_path &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/unicorn/log/REPO1.log&amp;quot;&lt;/span&gt;
stdout_path &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/unicorn/log/REPO1.log&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Edit repo 2&amp;#39;s unicorn2.conf to look like this:&lt;/span&gt;
listen &lt;span class=&quot;s2&quot;&gt;&amp;quot;/var/sockets/unicorn.REPO2.sock&amp;quot;&lt;/span&gt;, :backlog &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; 256
worker_processes 4
user &lt;span class=&quot;s2&quot;&gt;&amp;quot;rails&amp;quot;&lt;/span&gt;
working_directory &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/rails/REPO2&amp;quot;&lt;/span&gt;
pid &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/unicorn/pids/REPO2.pid&amp;quot;&lt;/span&gt;
stderr_path &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/unicorn/log/REPO2.log&amp;quot;&lt;/span&gt;
stdout_path &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/unicorn/log/REPO2.log&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I changed the listen statements to point to sockets as that is &lt;a href=&quot;http://www.gotealeaf.com/blog/setting-up-your-production-server-with-nginx-and-unicorn&quot;&gt;faster than going thru ports&lt;/a&gt; apparently. Default backlog is 1024, so you can leave or keep it.&lt;/p&gt;

&lt;p&gt;Onto the other unicorn config file. This file is the place that commands when the unicorn daemons start and such. Again, start with a copy/rename of the original for the 2nd repo. &lt;code&gt;Git init&lt;/code&gt; if you&amp;#39;re worried about messing things up royally. It really helps.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cp /etc/default/unicorn /etc/default/unicorn2

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano /etc/default/unicorn

&lt;span class=&quot;c&quot;&gt;# Edit these particular sections for Repo 1:&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Path to your web application, sh&amp;#39;ld be also set in server&amp;#39;s config.rb,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# option &amp;quot;working_directory&amp;quot;. Rack&amp;#39;s config.ru is located here.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;APP_ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/rails/REPO1

&lt;span class=&quot;c&quot;&gt;# Server&amp;#39;s config.rb, it&amp;#39;s not a rack&amp;#39;s config.ru&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONFIG_RB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/unicorn/REPO1.conf

&lt;span class=&quot;c&quot;&gt;# Where to store PID, sh&amp;#39;ld be also set in server&amp;#39;s config.rb, option &amp;quot;pid&amp;quot;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/unicorn/pids/REPO1.pid
&lt;span class=&quot;nv&quot;&gt;UNICORN_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;-D --config-file $CONFIG_RB -E production&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# change the RUBY_VERSION_REPO1 based on where&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# your rubies are located.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/rvm/rubies/RUBY_VERSION_REPO1/bin/:/home/unicorn/.rvm/bin:/usr/local/sbin:/usr/bin:/bin:/sbin:&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GEM_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/rvm/gems/RUBY_VERSION_REPO1
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GEM_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/rvm/gems/RUBY_VERSION_REPO1:/usr/local/rvm/gems/RUBY_VERSION_REPO1
&lt;span class=&quot;nv&quot;&gt;DAEMON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/rvm/gems/RUBY_VERSION_REPO1/bin/unicorn

&lt;span class=&quot;c&quot;&gt;# Env vars needed for the system to run REPO1 because unicorn is silly&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and doesn&amp;#39;t understand when Unix has your env vars.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SECRET_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;stick_your_secret_token_or_secret_key_base_token_hash
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WHATEVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;env-vars-you-need&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you&amp;#39;re not sure which ruby version you&amp;#39;re using, make sure you do &lt;code&gt;which ruby&lt;/code&gt; from &lt;em&gt;within&lt;/em&gt; the repo.&lt;/p&gt;

&lt;p&gt;Repeat these for the &lt;code&gt;unicorn2&lt;/code&gt; file, changing the values for the 2nd repo.&lt;/p&gt;

&lt;p&gt;One very. important. step. left with your unicorn setup. You&amp;#39;ve got to make a double of your unicorn initializer. That&amp;#39;s located in &lt;code&gt;/etc/init.d/&lt;/code&gt; as &lt;code&gt;unicorn&lt;/code&gt;.  Copy it and then edit the parts that references Unicorn. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cp /etc/init.d/unicorn /etc/init.d/unicorn2

&lt;span class=&quot;c&quot;&gt;# here are the parts I changed in unicorn2&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;unicorn2
&lt;span class=&quot;nv&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Unicorn2 web server&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f /etc/default/unicorn2 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  . /etc/default/unicorn2
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-/run/unicorn2.pid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

check_config&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONFIGURED&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    exit_with_message &lt;span class=&quot;s2&quot;&gt;&amp;quot;Unicorn2 is not configured (see /etc/default/unicorn2).&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This allows us to run commands like &lt;code&gt;service unicorn2 start|stop|restart&lt;/code&gt; much like how the regular unicorn is done. &lt;/p&gt;

&lt;p&gt;Time to restart all the unicorn services.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;service unicorn restart
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;service unicorn2 restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can confirm that both are running by checking &lt;code&gt;top -c&lt;/code&gt; then press &lt;code&gt;shift-M&lt;/code&gt;. Since we named the 2nd unicorn2, your top should have unicorn and unicorn2 running. Score!&lt;/p&gt;

&lt;h3 id=&quot;nginx&quot;&gt;Nginx&lt;/h3&gt;

&lt;p&gt;Now for the final bit. Nginx&amp;#39;s configuration.&lt;/p&gt;

&lt;p&gt;If you opt to &lt;code&gt;git init&lt;/code&gt; your nginx configuration, do it in &lt;code&gt;/etc/nginx/&lt;/code&gt; directory rather than &lt;code&gt;/etc/nginx/sites_enabled/&lt;/code&gt; because any extra files in this directory will be read in by nginx.&lt;/p&gt;

&lt;p&gt;I kept both apps&amp;#39; information in the default file as different server blocks, but you can keep them in separate files if you&amp;#39;d like. Whatever floats your boat.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# anything that isn&amp;#39;t https&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# becomes https, permanently&lt;/span&gt;
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  listen 80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    server_name DOMAIN1.com&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  rewrite ^ https://&lt;span class=&quot;nv&quot;&gt;$server_name$request_uri&lt;/span&gt;? permanent&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# anything that&amp;#39;s not https gets redirected to&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# domain2.com&lt;/span&gt;
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  listen 80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  server_name DOMAIN2.com&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;301&lt;/span&gt; https://DOMAIN2.com&lt;span class=&quot;nv&quot;&gt;$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# upstream for unicorn on repo 1. make sure&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sockets location is same as in /home/unicorn/unicorn.conf&lt;/span&gt;
upstream unicorn-REPO1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  server unix:/var/sockets/unicorn.REPO1.sock&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# SSL info for repo 1.&lt;/span&gt;
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  listen 443&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  server_name REPO1.com&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  ssl on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_certificate /etc/ssl/REPO1.com.crt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_certificate_key /etc/ssl/REPO1.com.key&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# location of repo 1&amp;#39;s public dir&lt;/span&gt;
  root /home/rails/REPO1/public&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  client_max_body_size 1024M&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    try_files &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;/index.html &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;.html &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; @app&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  location ~* ^.+&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;jpg&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;jpeg&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;gif&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;png&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;ico&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;zip&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;tgz&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;gz&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;rar&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;bz2&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;doc&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;xls&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;exe&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;pdf&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;ppt&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;txt&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;tar&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;mid&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;midi&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;wav&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;bmp&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;rtf&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;mp3&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;flv&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;mpeg&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;avi&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    try_files &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; @app&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# change proxy_pass to the upstream name from above&lt;/span&gt;
  location @app &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_redirect off&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_read_timeout 600&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_pass http://unicorn-REPO1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# for things to be downloaded properly&lt;/span&gt;
  location /files/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; /home/rails/REPO1/some-directory/&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    internal&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# upstream for unicorn on repo 2. make sure&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sockets location is same as in /home/unicorn/unicorn2.conf&lt;/span&gt;
upstream unicorn-REPO2 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  server unix:/var/sockets/unicorn.REPO2.sock&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# SSL config for server 2&lt;/span&gt;
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  listen &lt;span class=&quot;m&quot;&gt;443&lt;/span&gt; ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  server_name DOMAIN2.com&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  ssl on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_certificate /etc/ssl/REPO2.com.crt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_certificate_key /etc/ssl/REPO2.com.key&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# location of repo 1&amp;#39;s public dir&lt;/span&gt;
  root /home/rails/REPO2/public&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  index index.html index.htm&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    try_files &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;/index.html &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;.html &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; @app&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  location ~* ^.+&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;jpg&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;jpeg&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;gif&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;png&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;ico&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;zip&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;tgz&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;gz&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;rar&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;bz2&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;doc&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;xls&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;exe&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;pdf&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;ppt&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;txt&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;tar&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;mid&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;midi&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;wav&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;bmp&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;rtf&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;mp3&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;flv&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;mpeg&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;avi&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    try_files &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; @app&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# change the proxy_pass to point to upstream&amp;#39;s name&lt;/span&gt;
  location @app &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_redirect off&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_pass http://unicorn-REPO2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Server blocks are where you put all the good stuff that nginx needs to know with what to do. Since the app we had needed to be automatically changed to https, the listen 80 directive wasn&amp;#39;t that important - just needed to redirect to things properly. &lt;/p&gt;

&lt;p&gt;SSL certs and keys were placed in &lt;code&gt;/etc/ssl/&lt;/code&gt;. If you&amp;#39;ve got intermediate keys, you will want to have them combined into one giant .crt file.&lt;/p&gt;

&lt;p&gt;Check to ensure that your nginx config is syntactically correct. If all good, restart nginx!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nginx -t
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;service nginx restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Correct any mistakes. Make sure each directive ends with a &lt;code&gt;;&lt;/code&gt; !!!&lt;/p&gt;

&lt;p&gt;And voila! You&amp;#39;re good to go. Switch to the rails user to run your standard rake commands like &lt;code&gt;rake db:setup&lt;/code&gt; and &lt;code&gt;assets:precompile&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;I am sure you may have some errors for each ruby. Definitely check your logs for nginx and unicorn. When we did this, we had to re-connect the executable-hook for each of the apps since we used different ruby versions for the apps. Stack Overflow had some brilliant articles that helped us troubleshoot. I can&amp;#39;t recall which ones they were but if I encounter them again, I&amp;#39;ll post it here.&lt;/p&gt;

&lt;p&gt;Also, I&amp;#39;m a huge fan of making my life easier, so I created aliases for root to restart services. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch .bash_aliases
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano .bash_aliases

&lt;span class=&quot;c&quot;&gt;# copy paste this into the file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;restart-all&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;service nginx restart; service unicorn restart; service unicorn2 restart&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;restart-unicorns&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;service unicorn restart; service unicorn2 restart&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;restart-nginx&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;service nginx restart&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;====================================&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;       Restart shortcuts            &amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;====================================&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;restart-all      = restart nginx and both unicorn &amp;amp; unicorn2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;restart-unicorns = restart both unicorns&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;restart-nginx    = restart nginx&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# source your bashrc file to reload shell&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the echo output should be displayed at the top&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you&amp;#39;ll be able to run &lt;code&gt;restart-all&lt;/code&gt; to restart all your services. Woohoo! This is super handy when troubleshooting. And remember, when in doubt, &lt;code&gt;restart-all&lt;/code&gt; sometimes does the trick. :)&lt;/p&gt;

&lt;p&gt;A final word. If you find that your app needs to use Sidekiq or Resque, and you want to use Foreman + Upstart to drive your background workers from your Procfile, I suggest that you do &lt;em&gt;NOT&lt;/em&gt; want to use this 1-click template. &lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +50&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? I know I can make this cleaner, but there was NO article out there that talked about setting up 2 rails apps using the 1-click Digital Ocean rails template. Seriously. But if you&amp;#39;re stuck and are following these directions, shoot me an email and let me know! I&amp;#39;ll do my best to help if I can.  Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Mar 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/a-rails-double-app-setup/</link>
        <guid isPermaLink="true">http://risaonrails.com/a-rails-double-app-setup/</guid>
        
        <category>rails</category>
        
        <category>nginx</category>
        
        <category>digital ocean</category>
        
        <category>double setup</category>
        
        <category>unicorn</category>
        
        
        <category>rails</category>
        
        <category>digital ocean</category>
        
        <category>nginx</category>
        
        <category>guide</category>
        
      </item>
    
      <item>
        <title>Integrating Monit to Slack</title>
        <description>&lt;p&gt;The conversation of what software are we going to choose for monitoring our apps and servers came up at work. We&amp;#39;ve all used New Relic and Nagios before, but not really Monit. New Relic is free to a certain point, but can get hella expensive if you&amp;#39;ve got multiple apps and want to check many different things. Both Nagios and Monit are open-source, which equates to &lt;em&gt;FREE&lt;/em&gt;. Perfect for dev shops and small businesses.&lt;/p&gt;

&lt;p&gt;Since I like to read a lot of different articles while researching things, I kept coming across Monit as the go-to tool for monitoring instead of Nagios. Plus my boss had some bad experiences with setting it up before. Well, my Google-fu is fairly strong, so I decided to give Monit a try.&lt;/p&gt;

&lt;p&gt;I admit, setup was fairly simple.  Currently our stack is LEPPR (Linux Nginx Passenger Postgres Rails), not that it matters though. So real quick, here were the steps I used to set it up, before going to the meat of the article: integrating with Slack.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install monit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The file you want to edit will be &lt;code&gt;/etc/monit/monitrc&lt;/code&gt; which is the main config file. Comment out the bits about the httpd section, about mid-way thru, and add in your info as needed. As always, geared for Digital Ocean:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set httpd port 2812 and
  use address IP_ADDRESS       # Put your droplet IP here
  allow 0.0.0.0/0.0.0.0        # allow anyone to connect to the server and
  allow admin:&amp;#39;P@ssw0rd&amp;#39;       # require user and password for login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this does is allow you to hit up your IP address in the browser and see how things are looking: &lt;a href=&quot;http://IP_ADDRESS:2812&quot;&gt;http://IP_ADDRESS:2812&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Right on.&lt;/p&gt;

&lt;p&gt;Now, let&amp;#39;s integrate!&lt;/p&gt;

&lt;h3 id=&quot;on-slack&quot;&gt;On Slack&lt;/h3&gt;

&lt;p&gt;If you&amp;#39;re running the desktop app, click on the channel name&amp;#39;s &lt;code&gt;v&lt;/code&gt; down-button and choose Configure Integrations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the web page, choose &amp;quot;&lt;em&gt;Or, make your own!&lt;/em&gt;&amp;quot; which should take you to /services/new#diy.&lt;/li&gt;
&lt;li&gt;Click Add for &lt;strong&gt;Incoming Webhooks&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You can choose a channel or make a new one. I created one called &lt;code&gt;#monitoring&lt;/code&gt; because I&amp;#39;m not original.&lt;/li&gt;
&lt;li&gt;Click Add Integration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now you&amp;#39;ve got a webhook URL that looks something like this: &lt;a href=&quot;https://hooks.slack.com/services/HASH/Hash/LongHash&quot;&gt;https://hooks.slack.com/services/HASH/Hash/LongHash&lt;/a&gt;.  You can test out if it works by scrolling to the bottom and picking the integration settings, choosing what you want for description, custom name, etc. Test it out with the &lt;code&gt;curl&lt;/code&gt; command that they give you.  It&amp;#39;s JSON that drives the entire thing. &lt;/p&gt;

&lt;h3 id=&quot;on-monit&quot;&gt;On Monit&lt;/h3&gt;

&lt;p&gt;Now, back to the box. We&amp;#39;re rubyists here so this is how we roll. We&amp;#39;re going to create a file called &lt;code&gt;slack.rb&lt;/code&gt; in your &lt;code&gt;/etc/monit/&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo touch /etc/monit/slack.rb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo nano /etc/monit/slack.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now in this file, insert this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;net/https&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://hooks.slack.com/services/HASH/Hash/LongHash&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_ssl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#monitoring&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# channel name&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Monit Bot&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# you can name the bot whatever&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;icon_emoji&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;:.trollface:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# because why the hell not!&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;MONIT_HOST&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;MONIT_SERVICE&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;MONIT_DESCRIPTION&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Edited note: You&amp;#39;ll need to remove the . in trollface for it to work. Refer to how Slack does icons.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The cool thing about this is that you can pick whatever slack icon you want to use OR you can even upload your own for an emoji and use that. Obviously you&amp;#39;ll have to change the &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;channel&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt; and the like to what applies to you.&lt;/p&gt;

&lt;p&gt;Do a sanity check at this point to make sure everything&amp;#39;s correct. Run the ruby script real quick-like.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby /etc/monit/slack.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Did you get a notification in Slack?  Great, now make that into an executable file!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo chmod +x /etc/monit/slack.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will need to invoke this file whenever something happens, so to test it out, we&amp;#39;re going to create an nginx file to monitor nginx. This will be kept in &lt;code&gt;/etc/monit/conf.d/&lt;/code&gt; directory as a file called &lt;code&gt;nginx&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;check process nginx with pidfile /var/run/nginx.pid
  start &lt;span class=&quot;nv&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/sbin/service nginx start&amp;quot;&lt;/span&gt;
  stop  &lt;span class=&quot;nv&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/sbin/service nginx stop&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; failed host 127.0.0.1 port &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; restart
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; changed pid &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/slack.rb    &lt;span class=&quot;c&quot;&gt;# this is our sanity check&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; failed host 127.0.0.1 port &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/slack.rb &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; succeeded &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/slack.rb
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; cpu is greater than 40% &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; cycles &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/slack.rb &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; succeeded &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /etc/monit/slack.rb
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; cpu &amp;gt; 60% &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; cycles &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The basic format is that whenever you need to invoke an alert, instead of a &lt;code&gt;then alert&lt;/code&gt;, you are changing it to execute the slack.rb file. You &lt;strong&gt;must&lt;/strong&gt; specify the full path to slack.rb. Pretty much any time you see a &lt;code&gt;then alert&lt;/code&gt;, change it to &lt;code&gt;then exec /etc/monit/slack.rb&lt;/code&gt;. :)&lt;/p&gt;

&lt;p&gt;Check to ensure file is correct, reload monit to accept the changes, and then stop/start nginx.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo monit -t       &lt;span class=&quot;c&quot;&gt;# if errors, fix!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo monit reload
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo service nginx stop
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo service nginx start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;#39;s a few second delay but check out slack! You should see the message with your info all in there. HURRAY!&lt;/p&gt;

&lt;p&gt;This article used an Ubuntu 14.10 droplet.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +3&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Mar 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/integrate-monit-with-slack/</link>
        <guid isPermaLink="true">http://risaonrails.com/integrate-monit-with-slack/</guid>
        
        <category>slack</category>
        
        <category>monit</category>
        
        <category>devops</category>
        
        
        <category>devops</category>
        
        <category>monit</category>
        
        <category>slack</category>
        
        <category>guide</category>
        
      </item>
    
      <item>
        <title>A Quick Tip with Database Formatting</title>
        <description>&lt;p&gt;I&amp;#39;m constantly learning, mostly at this new job. It&amp;#39;s gotten to the point where I end up diving down the rabbit hole many many times. Don&amp;#39;t get me wrong, I love every bit of it. Might even say I&amp;#39;m addicted to it. Today&amp;#39;s tip is brought to you by both MySQL &amp;amp;&amp;amp; Postgres! Whoa, a double feature.&lt;/p&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;

&lt;p&gt;Know what I really don&amp;#39;t like? Having to check the database and getting results that are displayed all sorts of wonky because your terminal window wraps things when you run &lt;code&gt;select * from that_table where id=&amp;#39;1&amp;#39;;&lt;/code&gt;. It looks something like this in MySQL:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/quick-tip-mysql.png&quot; alt=&quot;MySQL&quot;&gt;&lt;/p&gt;

&lt;p&gt;Oh man. Postgres isn&amp;#39;t that much better, y&amp;#39;know.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/quick-tip-postgres.png&quot; alt=&quot;Postgres&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;

&lt;p&gt;So what do? In MySQL, every SQL command that needs to be formatted pretty needs to have \G appended at the end. &lt;code&gt;select * from that_table where id=&amp;#39;1&amp;#39; \G;&lt;/code&gt; Annoying to have to append &lt;code&gt;\G&lt;/code&gt; to the end, but it&amp;#39;s worth it. Here&amp;#39;s the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/quick-tip-mysql1.png&quot; alt=&quot;MySQL&quot;&gt;&lt;/p&gt;

&lt;p&gt;Postgres is a bit better in this regard. There&amp;#39;s a global setting called &lt;code&gt;\x auto&lt;/code&gt; which automatically prettifies the information based on terminal width. The only downside is if you&amp;#39;ve got a text column that&amp;#39;s so long it makes the actual header wrap. I&amp;#39;ll take it anyway, because once it&amp;#39;s set, it&amp;#39;s set until you change it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/quick-tip-postgres1.png&quot; alt=&quot;Postgres&quot;&gt;&lt;/p&gt;

&lt;p&gt;Right on! This makes viewing records directly in the database so much easier. &lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +1&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Hit me up at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Mar 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/a-quick-tip-with-database-formatting/</link>
        <guid isPermaLink="true">http://risaonrails.com/a-quick-tip-with-database-formatting/</guid>
        
        <category>postgres</category>
        
        <category>mysql</category>
        
        <category>tips</category>
        
        
        <category>postgres</category>
        
        <category>mysql</category>
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>Postgres Workshop Notes</title>
        <description>&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;Missed the Postgres workshop? Forgot what I covered? This post was made just for you then! :)&lt;/p&gt;

&lt;p&gt;Quick background on Postgres. It&amp;#39;s a relational database that is awesome because it&amp;#39;s highly extensible. For instance there is geospacial support (postGIS), key/value store (hstore), and with postgres 9.4, there&amp;#39;s JSON support (more so than what they had previously). You could say it&amp;#39;s the end-all-be-all for databases. At least that&amp;#39;s what I&amp;#39;d like to see it as! Obviously postgres may not suit your needs but this knowledge is valuable and transferable. And if you were afraid of reading the docs before, hopefully after this you won&amp;#39;t be.&lt;/p&gt;

&lt;h3 id=&quot;what-to-expect&quot;&gt;What to expect&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ll walk thru entering/exiting Postgres. Then a bit of navigation so you feel more comfortable with it. And then we&amp;#39;re going to go straight into dealing with import/export (restore/backup). For the import/export section, I&amp;#39;ve a chump vanilla Rails app that will be used because there&amp;#39;s a rake task in there that creates fake data. Hurray for the Faker gem!&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;first-thing&amp;#39;s-first&quot;&gt;First thing&amp;#39;s first&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s make sure you can run Postgres.&lt;/p&gt;

&lt;p&gt;On a Mac, you have a couple of options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the &lt;a href=&quot;http://postgresapp.com/&quot;&gt;postgresapp&lt;/a&gt;. Double-click to open and run it. Boom, postgres is running. You&amp;#39;ll see it as the cute lil elephant icon in your menu bar up top. If you quit the app, you quit the postgres server. &lt;/li&gt;
&lt;li&gt;Follow this &lt;a href=&quot;http://www.mikeball.us/blog/setting-up-postgres-with-homebrew/&quot;&gt;super awesome guide&lt;/a&gt;. This is what I used to set my machine up. I prefer this to Postgresapp, truthfully.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On *nix machines, use &lt;a href=&quot;http://www.postgresql.org/download/linux/&quot;&gt;the official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On Windows, you can use &lt;a href=&quot;http://www.postgresql.org/download/windows/&quot;&gt;this guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sorry *nix and Windows users. I&amp;#39;m a Mac user so the entire thing is geared for this. Don&amp;#39;t hate!&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;go-in,-go-out&quot;&gt;Go in, go out&lt;/h3&gt;

&lt;p&gt;Once you&amp;#39;ve followed the instructions for installation and have postgres running, we can confirm this by running &lt;code&gt;psql&lt;/code&gt; in Terminal.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ psql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did you get an error saying &lt;code&gt;FATAL role &amp;quot;YOURNAME&amp;quot; does not exist&lt;/code&gt; ? It&amp;#39;s saying that the user account you&amp;#39;re logged in as isn&amp;#39;t a postgres user. We&amp;#39;ve got to create it. Use the command below and make sure to use the name that the role says doesn&amp;#39;t exist. Say yes when they ask if the user (you) should be superuser. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ createuser --interactive YOURNAME
# Shall the new role be a superuser? (y/n) Y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did you get an error saying &lt;code&gt;FATAL database &amp;quot;YOURNAME&amp;quot; does not exist&lt;/code&gt;? Simple enough, we&amp;#39;ll just create it. Use the following command to create that particular database. Make sure you use the name that it references.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ createdb YOURNAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, in we go. The postgres prompt you see should have your account name if you followed the above steps. Since my account name is risa, my postgres username and database are risa. The prompt for me looks like &lt;code&gt;risa=#&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ psql
risa=#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great. Let&amp;#39;s quit out of postgres. The command is &lt;code&gt;\q&lt;/code&gt; (not the usual / one. It&amp;#39;s the \ above the return button)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;risa=# \q
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s always important to know how to exit any program. Otherwise you might be stuck in &lt;a href=&quot;https://twitter.com/iamdevloper/status/435555976687923200&quot;&gt;vim foreverrrrr&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;navigation&quot;&gt;Navigation&lt;/h3&gt;

&lt;p&gt;To find out where we&amp;#39;re at currently, type &lt;code&gt;\conninfo&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ psql
risa=# \conninfo
# You are connected to database &amp;quot;risa&amp;quot; as user &amp;quot;risa&amp;quot; via socket in &amp;quot;/tmp&amp;quot; at port &amp;quot;5432&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To list the databases you&amp;#39;ve got in postgres, type &lt;code&gt;\l&lt;/code&gt; (l for list)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;risa=# \l
# you&amp;#39;ll get an output that lists a bunch of databases, including template0 and template1.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note: template1 is what all new databases use when they get created. If you add an extension like `pg&lt;/em&gt;stat&lt;em&gt;statement` into template1, all your subsequent databases will have that extension turned on automatically. AWESOME.&lt;br&gt;
Template0 is the ultimate empty database. If you accidentally mess up template1, then you can use template0 to fix it. 
I&amp;#39;ll include directions on this maybe at the end or in another blog, but this wasn&amp;#39;t part of the workshop.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To change databases, you will have to do &lt;code&gt;\c DATABASE_NAME&lt;/code&gt;. Since I don&amp;#39;t know what databases you&amp;#39;ve already got in your system, I&amp;#39;ll use template1 as an example.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;risa=# \c template1
template1=#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the prompt changed. The prompt always points to the current database you&amp;#39;re in. Sweet.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s hop out and do some Rails things so we can look a bit deeper into postgres.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;rails-setup&quot;&gt;Rails setup&lt;/h3&gt;

&lt;p&gt;Please clone this repo: &lt;a href=&quot;https://github.com/rbatta/img_blog&quot;&gt;image blog&lt;/a&gt;. It&amp;#39;s my vanilla rails app based on the &lt;a href=&quot;https://www.railstutorial.org/book&quot;&gt;Michael Hartl tutorial&lt;/a&gt;&lt;br&gt;
It uses ruby 2.0.0, so you may have to use rvm or rbenv to change ruby versions for this app.&lt;/p&gt;

&lt;p&gt;Once cloned and ruby version is changed to 2.0.0, run the usual suspects:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake db:setup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With Rails 4.0 and below, &lt;code&gt;rake db:setup&lt;/code&gt; created a dev database with migrations run &lt;strong&gt;as well as an empty test database&lt;/strong&gt;.  In Rails 4.1+, &lt;code&gt;db:setup&lt;/code&gt; no longer creates an empty test database. You have to manually run &lt;code&gt;RAILS_ENV=test rake db:setup&lt;/code&gt;. Silly, I know.&lt;/p&gt;

&lt;p&gt;So, what did that rake db:setup do? Let&amp;#39;s find out.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ psql
risa=# \l
# you should see these 2 added into your database list
# imgblog_dev       | risa  | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
# imgblog_test      | risa  | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Boom. Now, let&amp;#39;s hop into the imgblog_dev database and check out the tables and stuff. BTW, you can press tab to autocomplete database names (and sometimes table names too). The command for displaying tables is &lt;code&gt;\dt&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;risa=# \c imgblog_dev
imgblog_dev=# \dt
# you should see 3 tables. images and users are the tables
# schema_migrations has the indexes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;re curious as to how big your tables might be, you can also do &lt;code&gt;\dt+&lt;/code&gt; which gives you sizes as well.&lt;/p&gt;

&lt;p&gt;To see what&amp;#39;s in the tables, you can then do your standard SQL query:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;imgblog_dev=# select * from users;
# this will display any/all your users and their columns. 
# right now it&amp;#39;s empty so you just see column names.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you just want to see the column names of the users table, you can do &lt;code&gt;\d users&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Great. Let&amp;#39;s hop back out and put some real data in to do some backups and restores. Assuming you&amp;#39;re still in the root directory of the img_blog, run the rake command to create a bunch of fake data.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;imgblog_dev=# \q
$ rake db:populate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hop in and confirm that data was created. I&amp;#39;m going to append the database name to the &lt;code&gt;psql&lt;/code&gt; statement to automatically go to that database.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ psql imgblog_dev
imgblog_dev=# SELECT * FROM users;
# you should see a bunch of output that might be cut off
# scroll with the arrow keys
# get the prompt back by pressing Q.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s count how many users and images were created. (Answer: 33 users, 66 images)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;imgblog_dev=# select count(*) from users;
# you get back 33
imgblog_dev=# select count(*) from images;
# you get back 66
imgblog_dev=# \q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Awesome. Great job so far!! Time to start the backup / restore process. I&amp;#39;ll go through the commands and append more flags as I go along, explaining each one. By the end, you should have about 4 backup files created.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;backup-and-restore-(export-and-import)&quot;&gt;Backup and Restore (Export and Import)&lt;/h3&gt;

&lt;h4 id=&quot;backup-first&quot;&gt;Backup first&lt;/h4&gt;

&lt;p&gt;Backups are created with the &lt;code&gt;pg_dump&lt;/code&gt; command, but in order for it to know what to do, you have to append flags (options) to the command and send the output to a file.  We&amp;#39;re going to be taking backups of &lt;code&gt;imgblog_dev&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ pg_dump -d imgblog_dev &amp;gt; ~/Desktop/dump1.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I had to read it out loud, it is saying &amp;quot;Take a dump (haha) of database imgblog_dev and send it to the Desktop and call it dump1.sql.&amp;quot; The &lt;code&gt;-d&lt;/code&gt; flag stands for database. The &lt;code&gt;&amp;gt;&lt;/code&gt; is to output the contents to a file in some location. In this case it&amp;#39;s to the Desktop, as dump1.sql. Why &lt;code&gt;.sql&lt;/code&gt; ? Truthfully, the extension doesn&amp;#39;t matter. It can be &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.asdf&lt;/code&gt;, or whatever. But for sanity sake, &lt;code&gt;.sql&lt;/code&gt;. You&amp;#39;ll see why when you open up the file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ subl ~/Desktop/dump1.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming you&amp;#39;ve got sublime as your text editor with that shortcut, that&amp;#39;ll work. Otherwise do what you normally do when opening up files. :) When you do, you&amp;#39;ll see that it&amp;#39;s got a bunch of SQL commands. If you look more closely, you&amp;#39;ll see that they have some &lt;code&gt;CREATE TABLE&lt;/code&gt; commands and then &lt;code&gt;COPY&lt;/code&gt; commands for the actual data. You&amp;#39;ve taken a human-readable backup of the database.&lt;/p&gt;

&lt;p&gt;What if all we want is the data? Imagine we&amp;#39;re transfering the information to another database and it&amp;#39;s already got tables set up because we&amp;#39;ve run migrations. What then? Let&amp;#39;s set some more flags.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ pg_dump -d imgblog_dev -a -O &amp;gt; ~/Desktop/dump2.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, so we&amp;#39;ve set 2 more flags: &lt;code&gt;-a&lt;/code&gt; and &lt;code&gt;-O&lt;/code&gt; (capital o, not zero). The &lt;code&gt;-a&lt;/code&gt; flag stands for &lt;code&gt;--data-only&lt;/code&gt;, so telling it to take only the data. The &lt;code&gt;-O&lt;/code&gt; command is &lt;code&gt;--no-owner&lt;/code&gt; which means remove all traces of ownership when getting this backup.  If you open up this file and compare it to dump1, here&amp;#39;s the kind of thing you&amp;#39;ll see.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# On ~ line 34 of dump1.sql, you&amp;#39;ll see the owner as yourself
-- Name: images; Type: TABLE; Schema: public; Owner: risa; Tablespace: 

# On ~ line 15 of dump2.sql, you don&amp;#39;t see an owner listed
-- Data for Name: images; Type: TABLE DATA; Schema: public; Owner: -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quick visual check also comfirms that dump2 only has data listed. No reference to tables.&lt;/p&gt;

&lt;p&gt;Imagine you&amp;#39;re working on a production database, hosted on Digital Ocean at IP address 127.0.0.1 and port 5432. (Reality: 127.0.0.1 == localhost == your computer&amp;#39;s own IP address) This theoretical database is like 2GB large (whoa), and you need to transfer it to your dev env. It&amp;#39;s gonna be a pain to download all 2GB. Let&amp;#39;s compress it down, like an archive file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ pg_dump -h 127.0.0.1 -p 5432 -d imgblog_dev -a -O -Fc &amp;gt; ~/Desktop/dump3.dump
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The flags to connect: &lt;code&gt;-h&lt;/code&gt; is for host, usually an IP or a .com kind of address; &lt;code&gt;-p&lt;/code&gt; is for port, default postgres port is 5432 but it can be set to anything.  The next new flag is the &lt;code&gt;-Fc&lt;/code&gt; flag. I like to think of it as &amp;quot;format compressed&amp;quot; but in reality it is &amp;quot;format custom.&amp;quot; There are other &lt;code&gt;-F&lt;/code&gt; options, like &lt;code&gt;-Ft&lt;/code&gt; and &lt;code&gt;-Fd&lt;/code&gt; which will also archive your file, but &lt;code&gt;-Fc&lt;/code&gt; is the one you want. Finally, notice that I changed the extension to &lt;code&gt;.dump&lt;/code&gt;. Again, it&amp;#39;s a sanity thing. Appending that lets me know that it&amp;#39;s actually a compressed file that I&amp;#39;m dealing with.&lt;/p&gt;

&lt;p&gt;If you open this file, you&amp;#39;ll immediately notice how it is completely human-readable gibberish and gobbledigook. :) It&amp;#39;s compressed after all. Postgres can understand it; we just know that the file is a lot smaller in size.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ pg_dump -h 127.0.0.1 -p 5432 -U risa -d imgblog_dev -Fc -a -O &amp;gt; ~/Desktop/dump4.dump
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This combines pretty much all the flags I&amp;#39;ve covered thus far with the addition of &lt;code&gt;-U&lt;/code&gt; which is user. In your case, make sure you put your postgres username in, since you won&amp;#39;t have a risa user (unless your name is Risa as well. Hi!)&lt;/p&gt;

&lt;p&gt;Congrats! You&amp;#39;ve gotten this far. One last stretch. Importing/restoring things back in!&lt;/p&gt;

&lt;h4 id=&quot;then-restore&quot;&gt;Then Restore&lt;/h4&gt;

&lt;p&gt;In the real world, you may have times when databases get completely effed up. Hopefully you&amp;#39;ve got redundant databases or at least a scheduled backup system set up. When this happens, we need to sometimes restore the database to a previously known state. It also means there&amp;#39;s a chance of some loss of data. (Having a failover plan is essential, btw.) Othertimes, maybe you&amp;#39;re pulling in prod data into staging so you can manipulate real data and run some load testing. Whatever the case, you need to import some data from one database to another.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s get to it. First we&amp;#39;re going to totally break things, because when I gave the workshop, it was live, and I broke things :) We are going to restore to the &lt;code&gt;imgblog_test&lt;/code&gt; database. &lt;/p&gt;

&lt;p&gt;But, one important thing. &lt;strong&gt;One Very Important Thing&lt;/strong&gt; When doing pg&lt;em&gt;dump, you have the two paths: human-readable and archive/compressed formats. If you choose the human-readable path, you _&lt;/em&gt;&lt;em&gt;MUST&lt;/em&gt;__ use &lt;code&gt;psql&lt;/code&gt;. If you choose the archive/compressed format, you &lt;strong&gt;&lt;em&gt;MUST&lt;/em&gt;&lt;/strong&gt; use pg_restore. Got that? In pseudocode it&amp;#39;s:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;use pg_dump
  if use -Fc
    use pg_restore
  else
    use psql
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we got that sorted, let&amp;#39;s use the compressed dump to import/restore.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ pg_restore -d imgblog_test &amp;lt; ~/Desktop/dump3.dump
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;ve been following very carefully, you will get a bunch of error output. Postgres did NOT like what just happened.  Here&amp;#39;s the proof:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ pg_restore: [archiver (db)] could not execute query: ERROR:  relation &amp;quot;images&amp;quot; does not exist
Command was: COPY images (id, img_url, img_name, description, user_id, created_at, updated_at, tags, gif, pictures) FROM stdin;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Key in the part where it says: &lt;code&gt;ERROR: relation &amp;quot;images&amp;quot; does not exist&lt;/code&gt;. Why&amp;#39;d it say that?  Remember how I said that in Rails 4.0, &lt;code&gt;rake db:setup&lt;/code&gt; creates an empty test database? Yeah.... Empty database has no tables. The import would not have worked because dump3.dump is a data-only and no-owner dump. It needs tables for data to be inserted.  Instead, let&amp;#39;s run dump1. Remember, since dump1 is a human-readable file, it needs to be run as psql.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ psql imgblog_test -f ~/Desktop/dump1.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output should be a list of SET&amp;#39;s and CREATE&amp;#39;s and COPY&amp;#39;s. They will correspond to the SETs and CREATEs and COPYs in your dump1.sql file. Confirm that data has been transferred properly.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ psql imgblog_test
imgblog_test=# \dt
# confirm you have images, schema_migrations, and users
imgblog_test=# select count(*) from users;
# you should have 33 users.
imgblog_test=# select count(*) from images;
# you should have 66 images.
imgblog_test=# \q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fantastic job! Let&amp;#39;s drop the database and confirm that it is no longer there. I am using a shortcut to display the list of databases without hopping into postgres. Then we&amp;#39;ll set it up properly.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ RAILS_ENV=test rake db:drop
$ psql -l
# confirm that imgblog_test does not exist
$ RAILS_ENV=test rake db:setup
# this runs db:create, migrate, and seed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, now let&amp;#39;s use that data-only dump file (dump3). The output of that is below the command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ pg_restore -d imgblog_test &amp;lt; ~/Desktop/dump3.dump
# the output
pg_restore: [archiver (db)] Error while PROCESSING TOC:
pg_restore: [archiver (db)] Error from TOC entry 2284; 0    34203 TABLE DATA schema_migrations risa
pg_restore: [archiver (db)] COPY failed for table &amp;quot;schema_    migrations&amp;quot;: ERROR:  duplicate key value violates unique    constraint &amp;quot;unique_schema_migrations&amp;quot;
DETAIL:  Key (version)=(20141122220745) already exists.
CONTEXT:  COPY schema_migrations, line 1
WARNING: errors ignored on restore: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oh no! There&amp;#39;s an ERROR!! But wait, it says &amp;quot;duplicate key value violates unique constraint&amp;quot; That&amp;#39;s just postgres double checking your work basically. No need to worry about that. It&amp;#39;s basically saying that it already existed in the database, but that&amp;#39;s to be expected, since we ran the migrations and created the tables (and indexes).  You can confirm that data indeed was still transferred over properly.&lt;br&gt;
...I will let you figure that one out on your own. :)&lt;/p&gt;

&lt;p&gt;OK, ONE LAST RESTORE! Imagine that you have to restore the database from your machine to another machine. Yup, you&amp;#39;ll need those host and port (and user, but skipping here) flags.  Before we do that, let&amp;#39;s reset the test database.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ RAILS_ENV=test rake db:reset
$ pg_restore -h 127.0.0.1 -p 5432 -d imgblog_test &amp;lt; ~/Documents/dump4.dump
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, same kind of errors, but hop in and check the data. Did it transfer over?  Awesome!&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;Congratulations!! You&amp;#39;ve learned how to navigate about in postgres, use some SQL commands, and import and export data from postgres. You rock! Give yourself a high-5 :D&lt;/p&gt;

&lt;p&gt;Now, after reading all of this, I hope you feel a bit more comfortable reading the documentation. Here are some super helpful links.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/app-psql.html&quot;&gt;Postgres Docs: psql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/app-pgdump.html&quot;&gt;Postgres Docs: pg_dump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/app-pgrestore.html&quot;&gt;Postgres Docs: pg_restore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;Questions? Comments? Suggestions? Please let me know. You can email me at &lt;a href=&quot;mailto:risaonrails@gmail.com&quot;&gt;risaonrails &lt;i class=&quot;fa fa-paper-plane-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;. No question is too dumb.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt; Level up +10&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Mar 2015 00:00:00 -0700</pubDate>
        <link>http://risaonrails.com/postgres-workshop-notes/</link>
        <guid isPermaLink="true">http://risaonrails.com/postgres-workshop-notes/</guid>
        
        <category>postgres</category>
        
        
        <category>postgres</category>
        
        <category>presentations</category>
        
        <category>guide</category>
        
      </item>
    
  </channel>
</rss>
